<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Just Another Developer&#39;s Blog</title>
    <link>https://a-urth.github.io/index.xml</link>
    <description>Recent content on Just Another Developer&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://a-urth.github.io/about&#34;&gt;Andrii Ursulenko&lt;/a&gt; 2016</copyright>
    <lastBuildDate>Sun, 27 Nov 2016 10:44:08 +0200</lastBuildDate>
    <atom:link href="https://a-urth.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Daily programmer - saturday defusal</title>
      <link>https://a-urth.github.io/post/daily-programmer-intermediate-2/</link>
      <pubDate>Sun, 27 Nov 2016 10:44:08 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/daily-programmer-intermediate-2/</guid>
      <description>&lt;p&gt;Right of the way gonna say that doing it on Saturday just because didn&amp;rsquo;t feel like doing it at all. This task is based on Mondays one and consists of two parts. Task is &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/5emuuy/20161124_challenge_293_intermediate_defusing_the/&#34;&gt;here&lt;/a&gt;, latest solution is &lt;a href=&#34;https://github.com/a-urth/daily-programmer/tree/master/20161124_intermediate&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So with regular task I came pretty quickly and there is really nothing special comparing with easy one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def wire-rules {:s0 {\w :s1, \r :s2}
                 :s1 {\w :s2, \o :s3}
                 :s2 {\b :s3, \r :s0}
                 :s3 {\b :s3, \o :s4, \g :s5}
                 :s4 {\g :exit}
                 :s5 {\o :exit}})

(defn end? [kw] (= kw :exit))

(defn defuse
  ([wires]
   (defuse wires :s0))

  ([[wire &amp;amp; others] cur-step]
   (let [next-step ((wire-rules cur-step) wire)]
     (condp = next-step
       :exit true
       nil false
       (recur others next-step)))))

(defn defuse-bomb [i wires]
  (println
   (if (defuse (map first (split-lines wires)))
     (format &amp;quot;%s - Bomb defused&amp;quot; i)
     (format &amp;quot;%s - Booom&amp;quot; i))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rules are now represented is slightly different form, &lt;code&gt;defuse&lt;/code&gt; function as well, but  its all pretty straightforward. The only thing I changed is implemented &lt;code&gt;condp&lt;/code&gt; part in &lt;code&gt;defuse&lt;/code&gt; function (saw it in other solution on reddit). Previously I had &lt;code&gt;if-let&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt; which was not so good looking in my opinion.&lt;/p&gt;

&lt;p&gt;While first part was pretty easy, there is bonus one, which is an interesting one. I&amp;rsquo;ve spent some time on solution design and came up with recursive algorithm with backtracking which looks something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn wires-&amp;gt;map [wires]
  (into {} (for [wire-row (split-lines wires)
                 :let [[wire n] (split wire-row #&amp;quot; &amp;quot;)]]
             [(first wire) (Integer. n)])))

(defn no-wires-left? [wires-m] (every? zero? (vals wires-m)))

(defn defusable?
  ([wires-m]
   (defusable? wires-m :s0))

  ([wires-m step]
   (if (end? step)  ; (1)
     (no-wires-left? wires-m)  ; (2)
     (loop [[[wire next-step] &amp;amp; other] (seq (wire-rules step))]  ; (3)
       (if (nil? wire)
         false
         (let [wire-n (wires-m wire)]
           (if (and
                (not (zero? wire-n))  ; (4)
                (defusable? (assoc wires-m wire (dec wire-n)) next-step))  ; (5)
             true
             (recur other))))))))

(defn check-bomb [i wires]
  (println
   (if (defusable? (wires-&amp;gt;map wires))
     (format &amp;quot;%s - Defusable&amp;quot; i)
     (format &amp;quot;%s - Not defusable&amp;quot; i))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I have two helper functions - one for converting input to map with wire colors as keys and number of wires as values (&lt;code&gt;wires-&amp;gt;map&lt;/code&gt;), and second for checking if there are still some wires left after finding correct solution (&lt;code&gt;no-wires-left?&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The thing I don&amp;rsquo;t like is how &lt;code&gt;defusable?&lt;/code&gt; function looks like. General idea behind it is to go through rules step by step and check if we have correct number of wires to perform defusal. We gonna recursively check each branch and if at some point we&amp;rsquo;ll find out that current branch is wrong we go back, which is backtracking part. Lets brake it in parts.
First we check if its a last step (&lt;strong&gt;1&lt;/strong&gt;) and there are no wires left (&lt;strong&gt;2&lt;/strong&gt;) then this is correct path and bomb is defusable. If there are still some wires left in the end, then this path is wrong and if its not the end yet - check current step. Checking current step means go through all possible branches for it (&lt;strong&gt;3&lt;/strong&gt;) and check if we have enough wires to cut (&lt;strong&gt;4&lt;/strong&gt;) and path down this branch satisfies rules (&lt;strong&gt;5&lt;/strong&gt;). If both are true, then this path is correct, if not - check other ones.&lt;/p&gt;

&lt;p&gt;Idea is pretty straightforward, implementation as well and it works as good as it can get. But i have a feeling that it could be written in better way, more idiomatic. I don&amp;rsquo;t like so much nesting and it looks like that recursive &lt;code&gt;loop&lt;/code&gt; can be changed with something more appropriate, but I have no clue with what exactly. I even asked for code review in clojure slack channel, and if I&amp;rsquo;ll be lucky enough to get some clues where I&amp;rsquo;ll do update of this solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Weekly feature - second and last for November 2016</title>
      <link>https://a-urth.github.io/post/weekly-feature-201611-2/</link>
      <pubDate>Fri, 25 Nov 2016 14:35:40 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/weekly-feature-201611-2/</guid>
      <description>

&lt;p&gt;Again I&amp;rsquo;m bringing pile of articles I&amp;rsquo;ve read this week and found them interesting enough to share.&lt;/p&gt;

&lt;p&gt;The most interesting things in my opinion were those tensioned discussions all over the internet about Zed Show&amp;rsquo;s article on python 3. Also I&amp;rsquo;ve read some materials on CAP theorem, yes, again, to clarify missing moments for me one more time. And I finally found book on Clojure for myself. I twice dismissed &lt;code&gt;Brave and true&lt;/code&gt;, its not bad in any sense, but just doesn&amp;rsquo;t fit my needs. &lt;code&gt;Programming clojure&lt;/code&gt; on the other hand appeared to be very interesting and informative reading. In couple of weeks I hope I&amp;rsquo;ll do a review for that.&lt;/p&gt;

&lt;h4 id=&#34;articles-on-software-development-stuff&#34;&gt;Articles on software development stuff&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Interesting bug related with hash tables in &lt;code&gt;rust&lt;/code&gt; which made lookup/insert operations go quadratic and interesting discussion also. [&lt;a href=&#34;https://www.reddit.com/r/programming/comments/5eow80/rusts_standard_hash_table_types_could_go/&#34;&gt;https://www.reddit.com/r/programming/comments/5eow80/rusts_standard_hash_table_types_could_go/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Incredible amount of different materials on CS topics. Simply treasure. [&lt;a href=&#34;https://github.com/Developer-Y/cs-video-courses/blob/master/README.md#data-structures-and-algorithms&#34;&gt;https://github.com/Developer-Y/cs-video-courses/blob/master/README.md#data-structures-and-algorithms&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Weird stuff from the author of the one of most popular courses for python newbies. Almost all arguments are like from another planet and tone of the article is so pretentious [&lt;a href=&#34;https://learnpythonthehardway.org/book/nopython3.html&#34;&gt;https://learnpythonthehardway.org/book/nopython3.html&lt;/a&gt;] and great response to it [&lt;a href=&#34;https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/&#34;&gt;https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/&lt;/a&gt;] and sort of post mortem from author [&lt;a href=&#34;https://zedshaw.com/2016/11/24/the-end-of-coder-influence/&#34;&gt;https://zedshaw.com/2016/11/24/the-end-of-coder-influence/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Brief introduction to &lt;code&gt;go&lt;/code&gt; interfaces. [&lt;a href=&#34;http://www.calhoun.io/how-do-interfaces-work-in-go/&#34;&gt;http://www.calhoun.io/how-do-interfaces-work-in-go/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Insane overview of distributed systems class from Aphyr. [&lt;a href=&#34;https://github.com/aphyr/distsys-class&#34;&gt;https://github.com/aphyr/distsys-class&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Which rules provide for user&amp;rsquo;s passwords in 2016. [&lt;a href=&#34;https://nakedsecurity.sophos.com/2016/08/18/nists-new-password-rules-what-you-need-to-know/&#34;&gt;https://nakedsecurity.sophos.com/2016/08/18/nists-new-password-rules-what-you-need-to-know/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Rapid intro to Lisp. [&lt;a href=&#34;https://hackernoon.com/learn-you-a-lisp-in-0-minutes-e0c1a060a178#.wnnx02rfe&#34;&gt;https://hackernoon.com/learn-you-a-lisp-in-0-minutes-e0c1a060a178#.wnnx02rfe&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Great reading on very clever simplification for inverse square root and why its important. [&lt;a href=&#34;http://h14s.p5r.org/2012/09/0x5f3759df.html&#34;&gt;http://h14s.p5r.org/2012/09/0x5f3759df.html&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Yet another stone thrown at python by one of its long term users. I&amp;rsquo;m kinda agreed with point of view of Jeff in terms that python code is really hard maintainable in bigger scale and in longer terms especially with big teams. Not that its bad language by any means, it just compromises some safety, speed and robustness in favor to simplicity (at least on the surface) and user friendliness. I&amp;rsquo;m caught by myself not even once that I&amp;rsquo;m missing static typing in python badly. [&lt;a href=&#34;https://jeffknupp.com/blog/2016/11/13/how-python-makes-working-with-data-more-difficult-in-the-long-run/&#34;&gt;https://jeffknupp.com/blog/2016/11/13/how-python-makes-working-with-data-more-difficult-in-the-long-run/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting note on trailing slashes for URIs. Never actually fought about such problem, but this week I faced it and decided to do some investigation. This article seems to be the most reasonable explanation. Note that for REST it will slightly differ. [&lt;a href=&#34;https://cdivilly.wordpress.com/2014/03/11/why-trailing-slashes-on-uris-are-important/&#34;&gt;https://cdivilly.wordpress.com/2014/03/11/why-trailing-slashes-on-uris-are-important/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;This looks so weird that I can&amp;rsquo;t even say what am I thinking about that. This looks interesting and pretentious at the same time. New programming language, new platform, new paradigm? [&lt;a href=&#34;https://hackernoon.com/how-eve-unifies-your-entire-programming-stack-900ca80c58a7#.hwfuncwxs&#34;&gt;https://hackernoon.com/how-eve-unifies-your-entire-programming-stack-900ca80c58a7#.hwfuncwxs&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Semaphore and deadlock explained as easy as it can gets. [&lt;a href=&#34;https://www.reddit.com/r/compsci/comments/5e08s5/eli5_semaphores_and_the_producerconsumer_problem/&#34;&gt;https://www.reddit.com/r/compsci/comments/5e08s5/eli5_semaphores_and_the_producerconsumer_problem/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Couple of articles on infamous CAP theorem.

&lt;ul&gt;
&lt;li&gt;Briefly what is it all about - [&lt;a href=&#34;https://jvns.ca/blog/2016/11/19/a-critique-of-the-cap-theorem/&#34;&gt;https://jvns.ca/blog/2016/11/19/a-critique-of-the-cap-theorem/&lt;/a&gt;] which lead me to next two.&lt;/li&gt;
&lt;li&gt;Almost the same but with much more details, great reading actually. [&lt;a href=&#34;https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed&#34;&gt;https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed&lt;/a&gt;].&lt;/li&gt;
&lt;li&gt;Also great read with similar arguments but with better explanation of terminology and issues and with tons of links to other great materials. [&lt;a href=&#34;https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html&#34;&gt;https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Interesting point of view on how abstractions affect our code with time and different people and why its better to simplify them right from the start and even rewrite with time. [&lt;a href=&#34;http://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction&#34;&gt;http://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting site which promises to provide developer mock interview same as it in those dream companies like Amazon, Uber, Facebook etc. I found its interesting because of blog and couple of articles about pretty cool interview question, generally programming ones. [&lt;a href=&#34;http://www.gainlo.co/&#34;&gt;http://www.gainlo.co/&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;articles-on-other-interesting-topics&#34;&gt;Articles on other interesting topics&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Valid rant on new USB-C ports and their wide capabilities and why it will be very misleading for regular customers and bad for market in general. &lt;a href=&#34;__RUS__&#34;&gt;https://geektimes.ru/post/282824/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Got my jaw dropped after reading that something like that exists - prime number which in binary form represents program to brake DVD protection. [&lt;a href=&#34;https://en.wikipedia.org/wiki/Illegal_prime&#34;&gt;https://en.wikipedia.org/wiki/Illegal_prime&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Flaws of deterministic password managers. And I actually didn&amp;rsquo;t even know that such exists. Anyway after reading this article I don&amp;rsquo;t think that I would try some. [&lt;a href=&#34;https://tonyarcieri.com/4-fatal-flaws-in-deterministic-password-managers&#34;&gt;https://tonyarcieri.com/4-fatal-flaws-in-deterministic-password-managers&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Very interesting reading on ternary machines. I&amp;rsquo;ve already read ones about such unique computers and that they were more efficient calculation wise than binary ones. But I never thought actually why. And the most interesting thing for me appeared that worldwide usage of binary systems is explained by easiness and low price of production. Is it possible for all of us to switch to some other systems if we&amp;rsquo;ll actually learn how to make production of those ternary elements cheap? [&lt;a href=&#34;https://dev.to/buntine/the-balanced-ternary-machines-of-soviet-russia&#34;&gt;https://dev.to/buntine/the-balanced-ternary-machines-of-soviet-russia&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Why Apple&amp;rsquo;s new macbook pros have only 16Gb of RAM? [&lt;a href=&#34;https://macdaddy.io/macbook-pro-limited-16gb-ram/&#34;&gt;https://macdaddy.io/macbook-pro-limited-16gb-ram/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting confession of mature developer about stuff he did as a youngster. Definitely worth reading and thinking about what ACTUALLY we are doing while write code. [&lt;a href=&#34;https://medium.freecodecamp.com/the-code-im-still-ashamed-of-e4c021dff55e#.dht7gjk43&#34;&gt;https://medium.freecodecamp.com/the-code-im-still-ashamed-of-e4c021dff55e#.dht7gjk43&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Great application for Mac OS on recreating pictures in primitive shapes. It looks really awesome! [&lt;a href=&#34;https://primitive.lol&#34;&gt;https://primitive.lol&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Daily programmer (easy Monday)</title>
      <link>https://a-urth.github.io/post/daily-programmer-easy-2/</link>
      <pubDate>Mon, 21 Nov 2016 23:35:07 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/daily-programmer-easy-2/</guid>
      <description>&lt;p&gt;Another easy Monday except this one is little bit more easy than last one. &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/5e4mde/20161121_challenge_293_easy_defusing_the_bomb/&#34;&gt;Here&lt;/a&gt; is the task.&lt;/p&gt;

&lt;p&gt;I finished rather fast with initial version, but doing little changes for of times I&amp;rsquo;ve ended up with this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns daily-programmer.20161121_easy.core
  (:use [clojure.string :only [split-lines]]))

(def wire-rules-m {&amp;quot;white&amp;quot; {:to-cut #{} :not-to-cut #{&amp;quot;white&amp;quot; &amp;quot;black&amp;quot;}}
                   &amp;quot;red&amp;quot; {:to-cut #{&amp;quot;green&amp;quot;} :not-to-cut #{}}
                   &amp;quot;black&amp;quot; {:to-cut #{} :not-to-cut #{&amp;quot;white&amp;quot; &amp;quot;green&amp;quot; &amp;quot;orange&amp;quot;}}
                   &amp;quot;orange&amp;quot; {:to-cut #{&amp;quot;red&amp;quot; &amp;quot;black&amp;quot;} :not-to-cut #{}}
                   &amp;quot;green&amp;quot; {:to-cut #{&amp;quot;orange&amp;quot; &amp;quot;white&amp;quot;} :not-to-cut #{}}
                   &amp;quot;purple&amp;quot; {:to-cut #{} :not-to-cut #{&amp;quot;purple&amp;quot; &amp;quot;green&amp;quot; &amp;quot;orange&amp;quot; &amp;quot;white&amp;quot;}}})

(defn can-cut? [wire &amp;amp; [{:keys [to-cut not-to-cut]} rules]]
  (and
   (or (empty? to-cut) (contains? to-cut wire))
   (or (empty? not-to-cut) (not (contains? not-to-cut wire)))))

(defn defuse
  ([wires]
   (defuse wires {:to-cut #{}, :not-to-cut #{}}))

  ([[wire &amp;amp; others] rules]
   (let [cut (can-cut? wire rules)]
     (if (nil? others)
       cut
       (and cut (recur others (get wire-rules-m wire)))))))

(println (if (defuse (split-lines (slurp *in*))) &amp;quot;Bomb defused&amp;quot; &amp;quot;Boom&amp;quot;))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And as You can guess I didn&amp;rsquo;t have a clue how to implement real state machines. If You want to see something cool and fast then You should definitely check couple of top comments on reddit thread, its insane!&lt;/p&gt;

&lt;p&gt;So, getting back to my solution - major things I changed comparing to initial version are:
* changed &lt;code&gt;loop&lt;/code&gt; and default arguments in it to function with two arities and doing recur directly to it;
* replaced &lt;code&gt;if&lt;/code&gt; form with &lt;code&gt;and&lt;/code&gt; so it looks shorter and cleaner e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(and cut (recur others (get wire-rules-m wire))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;previously rules map destructuring was done in &lt;code&gt;let&lt;/code&gt; just before recursion call, moved it to &lt;code&gt;can-cut?&lt;/code&gt; function arguments;&lt;/li&gt;
&lt;li&gt;changed names of rules map keys, now its much better then &amp;ldquo;allowed&amp;rdquo; and &amp;ldquo;disallowed&amp;rdquo; in my opinion.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Saturday morning - random coding problems solving</title>
      <link>https://a-urth.github.io/post/random-saturday-morning-coding-tasks/</link>
      <pubDate>Sat, 19 Nov 2016 11:31:39 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/random-saturday-morning-coding-tasks/</guid>
      <description>

&lt;p&gt;So I just randomly (from &lt;a href=&#34;http://reddit.com/r/coding&#34;&gt;/r/coding&lt;/a&gt; actually) came across this &lt;a href=&#34;http://www.gainlo.co/&#34;&gt;site&lt;/a&gt; which is built over idea of mocking interviews similar to big IT companies do. And it got my attention because it has some examples of programming tasks in its blog. Tasks, which I found seem to be not hard at all (authors mention this as well) and I think that such problems may be asked either for lower grade positions or during initial stages of interviewing process.&lt;/p&gt;

&lt;p&gt;But anyway, I found some of them really interesting and since I had some time this Saturday morning I thought - way not to sharpen my coding skills with beautiful clojure (because being python dev usually on interviews I&amp;rsquo;m doing them in python).&lt;/p&gt;

&lt;h5 id=&#34;move-zeroes-http-blog-gainlo-co-index-php-2016-11-18-uber-interview-question-move-zeroes&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/11/18/uber-interview-question-move-zeroes/&#34;&gt;Move Zeroes&lt;/a&gt;&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Modify the array by moving all the zeros to the end (right side). The order of other elements doesn’t matter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I came with this straightforward solution. I know that it can be done better and in fact, later I did it in python in similar way which described in blog post. But this one sees to be neat and tiny.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def problem [1 2 0 3 0 1 2])

(defn reducer [[acc i] e]
  (if (zero? e)
    [acc (inc i)]
    [(conj acc e) i]))

(let [[non-zeros zeros-num] (reduce reducer [[] 0] problem)]
  (into non-zeros (repeat zeros-num 0)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I&amp;rsquo;m just going through list of values counting how much zeroes there are and filtering result for them. After that I&amp;rsquo;m just adding required number of zeroes to filtered values.&lt;/p&gt;

&lt;p&gt;In the blog post You can find better solution which requires data mutation, I think it can be written in &lt;code&gt;clojure&lt;/code&gt; as well but I just wasn&amp;rsquo;t interested in that.&lt;/p&gt;

&lt;h5 id=&#34;delimiter-matching-http-blog-gainlo-co-index-php-2016-09-30-uber-interview-question-delimiter-matching&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/09/30/uber-interview-question-delimiter-matching/&#34;&gt;Delimiter Matching&lt;/a&gt;&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Write an algorithm to determine if all of the delimiters in an expression are matched and closed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is pretty popular coding task and I&amp;rsquo;m pretty sure that everyone faced it in one way or another if they ever done some programming stuff on data structures. Because this is the most popular showcase for &lt;code&gt;stack&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def problem &amp;quot;[dklf(df(kl))d]{&amp;quot;)

(def brackets-m {\] \[, \} \{, \) \(})

(def closings (set (keys brackets-m)))

(def openings (set (vals brackets-m)))

(def error-msg &amp;quot;Delimiters unmatched!&amp;quot;)

(defn match? [o c] (= (get brackets-m c) o))

(defn process-sym [res s]
  (cond
    (contains? openings s) (conj res s)
    (contains? closings s) (if (match? (last res) s)
                             (drop-last res)
                             (throw (Exception. error-msg)))
    :else res))

(let [s (reduce process-sym [] problem)]
  (when (not (empty? s))
    (throw (Exception. error-msg))))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are plenty of &lt;code&gt;def&lt;/code&gt;s and helper function&amp;rsquo;s declaration but main idea is in &lt;code&gt;process-sym&lt;/code&gt; function. What id does is checks if we have other than bracket symbol - just continue, if its an opening bracket - put it into stack, if closing one - take last from stack and compare them. If they do not match each other - raise exception which means that delimiters are not matched. Same check is required after processing whole sequence - if there is still something in the stack, then raise exception. &lt;code&gt;nil&lt;/code&gt; returned if delimiters are matched. I did it with exceptions just because its easier to propagate error in &lt;code&gt;process-sym&lt;/code&gt; but it can be approached in some other ways.&lt;/p&gt;

&lt;h5 id=&#34;longest-substring-without-repeating-characters-http-blog-gainlo-co-index-php-2016-10-07-facebook-interview-longest-substring-without-repeating-characters&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/10/07/facebook-interview-longest-substring-without-repeating-characters/&#34;&gt;Longest Substring Without Repeating Characters&lt;/a&gt;&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a string, find the longest substring without repeating characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m sure that this one is also popular programming question but I actually never came across it. Right of the way I&amp;rsquo;ve noticed naive solution (check all substrings), but its obvious that this was not the most efficient one, so I&amp;rsquo;ve decided to think a little before writing even single character. Soon I found that we can store symbols in set to check for repeats and use two pointers for current substring and in case of repeat we should start next search from position of repeated symbol. But my mistake was that I wanted to use position of second repeated symbol instead of first one. In order to do that efficient I changed my set to map with symbols as keys and their indexes as values and it worked like a charm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def problem &amp;quot;abccdefdgh&amp;quot;)

(def problem-l (count problem))

(loop [start-i 0 end-i 0
       cur-syms-m {}]
  (if (= end-i problem-l)
    (subs problem start-i end-i)
    (let [cur-sym (get problem end-i)
          cur-i (get cur-syms-m cur-sym)
          next-end-i (inc end-i)]
      (if (nil? cur-i)
        (recur start-i next-end-i (conj cur-syms-m {cur-sym end-i}))
        (recur (inc cur-i) next-end-i {cur-sym cur-i})))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In blogpost You can find solution in python which uses similar but slightly different approach.&lt;/p&gt;

&lt;h5 id=&#34;design-hit-counter-http-blog-gainlo-co-index-php-2016-09-12-dropbox-interview-design-hit-counter&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/09/12/dropbox-interview-design-hit-counter/&#34;&gt;Design Hit Counter&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Interesting question on systems design, again, pretty common one. Only thing that I would like to add is if You need to count only unique visitors and we are talking about really big amount of data then speed and memory efficiency are much more important then exact answer, so approximation approaches such as &lt;a href=&#34;https://en.wikipedia.org/wiki/HyperLogLog&#34;&gt;HyperLoglog&lt;/a&gt; should be mentioned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Weekly feature - first for November 2016</title>
      <link>https://a-urth.github.io/post/weekly-feature-201611-1/</link>
      <pubDate>Fri, 18 Nov 2016 17:01:26 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/weekly-feature-201611-1/</guid>
      <description>

&lt;p&gt;So this is one of the things I actually started running this blog for. I want to collect all written/watched/seen stuff related to software development, IT in general or simply something interesting in one place and post it weekly in sort of digest.&lt;/p&gt;

&lt;p&gt;Since I&amp;rsquo;m doing this strictly for myself there will be no language or technology specific stuff, but just anything I&amp;rsquo;ve read or seen during week and found interesting for myself. And since its first issue I&amp;rsquo;ll add couple of items which I&amp;rsquo;ve found little bit more than a week ago. Also all articles are in English if other not specified in braces after link.&lt;/p&gt;

&lt;p&gt;So lets start.&lt;/p&gt;

&lt;h4 id=&#34;articles-on-software-development-stuff&#34;&gt;Articles on software development stuff&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;What to use for game development in python. Regardless possible argument that no one actually writes games in python (and its just wrong assumption) its interesting discussion. I remember me just getting into all this python stuff almost 4 years ago I also was thinking about what to use. PyGame was sort of goto solution because of its popularity mainly. But seems that now its almost completely dead and there is no strict answer to that question. [&lt;a href=&#34;https://www.reddit.com/r/Python/comments/5dgp20/if_the_pyglet_community_is_dead_and_pygame_is_not/&#34;&gt;https://www.reddit.com/r/Python/comments/5dgp20/if_the_pyglet_community_is_dead_and_pygame_is_not/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Materialized views in pg 9.4, briefly. [&lt;a href=&#34;http://bonesmoses.org/2015/03/06/pg-phriday-materialized-views-revisited/&#34;&gt;http://bonesmoses.org/2015/03/06/pg-phriday-materialized-views-revisited/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting practical thoughts on how to write OOP code that doesn&amp;rsquo;t suck. Especially crucial nowadays when it seems that no one pays attention to OOP. [&lt;a href=&#34;https://dev.to/naveen/how-to-write-an-object-oriented-program-that-doesnt-suck&#34;&gt;https://dev.to/naveen/how-to-write-an-object-oriented-program-that-doesnt-suck&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Another round of frameworks battle is down and there are some interesting results. For me the most interesting thing appeared that all somewhat fast python frameworks use &lt;a href=&#34;http://meinheld.org&#34;&gt;Meinheld&lt;/a&gt; as a web server, which, to my shame, I&amp;rsquo;ve never heard of. Also I&amp;rsquo;ve been surprised that &lt;code&gt;gin&lt;/code&gt; framework for &lt;code&gt;go&lt;/code&gt; is so fast in json serialization test and ok for all others (last is expected). In more real life tests with db usage &lt;code&gt;fasthttp&lt;/code&gt; is still the king. Also have no idea whats up with top 3 &lt;code&gt;Dart&lt;/code&gt; frameworks in multiple queries test. [&lt;a href=&#34;https://www.techempower.com/benchmarks/#section=data-r13&amp;amp;hw=ph&amp;amp;test=query&#34;&gt;https://www.techempower.com/benchmarks/#section=data-r13&amp;amp;hw=ph&amp;amp;test=query&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting reading on &lt;code&gt;go&lt;/code&gt;&amp;rsquo;s specifics or I&amp;rsquo;d rather say tricks and gotchas. Yes, they exist, but usually obvious and definitely not so ridiculous as javascript ones for example. I&amp;rsquo;m not that proficient in &lt;code&gt;go&lt;/code&gt; but even I knew almost all of them. &lt;a href=&#34;__RUS__&#34;&gt;https://habrahabr.ru/company/mailru/blog/314804/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Good old stuff from famous Aphyr on RabbitMQ&amp;rsquo;s approaches to clustering and possible tradeoffs. I&amp;rsquo;ve already read in once but just wanted to remind myself what was the problem and how to avoid it. [&lt;a href=&#34;https://aphyr.com/posts/315-jepsen-rabbitmq&#34;&gt;https://aphyr.com/posts/315-jepsen-rabbitmq&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Cool point on why iterating in python over unordered collection is slower than on ordered one. [&lt;a href=&#34;https://rickystewart.wordpress.com/2013/09/03/why-sorting-an-array-makes-a-python-loop-faster/&#34;&gt;https://rickystewart.wordpress.com/2013/09/03/why-sorting-an-array-makes-a-python-loop-faster/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting brief introduction to general purpose retrying in programming with examples in python/flask from Miguel Grinberg. [&lt;a href=&#34;https://blog.miguelgrinberg.com/post/how-to-retry-with-class&#34;&gt;https://blog.miguelgrinberg.com/post/how-to-retry-with-class&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting and motivational reading about building right attitude for game development, especially when You&amp;rsquo;re trying to get Your first game done. [&lt;a href=&#34;http://howtomakeanrpg.com/a/not-your-problem.html&#34;&gt;http://howtomakeanrpg.com/a/not-your-problem.html&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;articles-on-other-interesting-topics&#34;&gt;Articles on other interesting topics&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Some stories and historical facts about how different people - famous and not - used algorithms in day-to-day life. And general overview on what are algorithms and why You should care about them for non computer science folks. &lt;a href=&#34;__RUS__&#34;&gt;https://newtonew.com/discussions/algorithms-to-live-by&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Entertainment reading on how to control vertical alignment of skyscraper during its construction. Which techniques used and how do they work. &lt;a href=&#34;__RUS__&#34;&gt;https://geektimes.ru/company/lakhta_center/blog/282584/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interesting story about young fella who tried to create his own nuclear power station and how it ended (spoiler - it ended badly). &lt;a href=&#34;__RUS__&#34;&gt;https://geektimes.ru/post/282594/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Very interesting research on distribution of computer skills and how it should affect our thoughts about target auditory for software we build. [&lt;a href=&#34;https://www.nngroup.com/articles/computer-skill-levels/&#34;&gt;https://www.nngroup.com/articles/computer-skill-levels/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Couple of cheerful words from great blogger WaitButWhy on latest USA elections. Generally what he tries to say that every one has its one opinion and You actually should not be so afraid of what happened. [&lt;a href=&#34;http://waitbutwhy.com/2016/11/its-going-to-be-okay.html&#34;&gt;http://waitbutwhy.com/2016/11/its-going-to-be-okay.html&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;And for something completely different - Ukrainian military forces presented new rocket launcher which apparently uses&amp;hellip; RaspberryPi. Yeah&amp;hellip; It may be complete bullshit but also may be really interesting usage of this neat small computer. And this case actually reminded me some cool &lt;a href=&#34;https://en.wikipedia.org/wiki/PlayStation_3_cluster&#34;&gt;usage of PS3&lt;/a&gt;, so don&amp;rsquo;t underestimate brave engineering approaches. [&lt;a href=&#34;http://www.popularmechanics.com/military/weapons/a23774/raspberry-pi-ukrainian-weapon-system/&#34;&gt;http://www.popularmechanics.com/military/weapons/a23774/raspberry-pi-ukrainian-weapon-system/&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;videos&#34;&gt;Videos&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;EuroClojure 2016 and there are some great speakers with tons of cool stuff. Just watched couple of them and it seems really interesting. [&lt;a href=&#34;https://www.youtube.com/playlist?list=PLZdCLR02grLowQLPjuZ7k3pl2ScEyW7A7&#34;&gt;https://www.youtube.com/playlist?list=PLZdCLR02grLowQLPjuZ7k3pl2ScEyW7A7&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;LabmdaConf 2016 happened In September (yeah, two months passed Andrii). Watched through couple of most viewed but didn&amp;rsquo;t quite find something really interesting for me. [&lt;a href=&#34;https://www.youtube.com/channel/UCEtohQeDqMSebi2yvLMUItg/videos&#34;&gt;https://www.youtube.com/channel/UCEtohQeDqMSebi2yvLMUItg/videos&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Almost all that stuff can be found also on my &lt;a href=&#34;http://twitter.com/a_ursulenko&#34;&gt;twitter&lt;/a&gt; there I&amp;rsquo;ll post it just as found.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Daily programmer (easy Monday)</title>
      <link>https://a-urth.github.io/post/daily-programmer-easy/</link>
      <pubDate>Thu, 17 Nov 2016 18:05:25 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/daily-programmer-easy/</guid>
      <description>

&lt;p&gt;Since this is first post on daily-programmer topic I need some introduction.
So there is this awesome sub reddit called &lt;a href=&#34;http://reddit.com/r/dailyprogrammer/&#34;&gt;DailyProgrammer&lt;/a&gt; where programming tasks on algorithms are posted 3 times a week. Easy ones on Mondays, intermedium ones on Tuesdays and hard ones on Friday. You can post Your solutions in favorite language and compile and test them directly in the comment section with &lt;code&gt;/u/CompileBot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been aware about this thing for already quite some time but never was able to stick with it for too long. Actually my last try lasted only for one easy task, which is hilarious, I know.&lt;/p&gt;

&lt;p&gt;And as You&amp;rsquo;ve already may guessed, since I&amp;rsquo;m some what trying to get closer to &lt;a href=&#34;http://clojure.org&#34;&gt;Clojure&lt;/a&gt;, recently I decided to do one more try with daily-programmer. Here is my solution to latest task at this moment (its description can be found &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/5d1l7v/20161115_challenge_292_easy_increasing_range/&#34;&gt;here&lt;/a&gt;), I&amp;rsquo;ll go through main points and my design decisions, mainly to do small repeat to myself and maybe improve something.&lt;/p&gt;

&lt;p&gt;Here is my solution and lets break it down into blocks&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Clojure&#34;&gt;(use &#39;[clojure.string :only [split split-lines join]])

(defn pow10 [i] (reduce * (repeat i 10)))

(defn unshorten [x y]  ; (4)
  (if (&amp;gt; y x)
    y
    (let [l-y (count (str y))
          pred-x (quot x (pow10 l-y))  ; (4.1)
          last-x (mod x (pow10 l-y))  ; (4.2)
          pred (if (&amp;lt; last-x y) pred-x (inc pred-x))]  ; (4.3)
      (Integer. (str pred y)))))  ; (4.4)

(defn range-part [acc s]  ; (3)
  (let [[t-start t-end t-step] (map #(Integer. %) (split s #&amp;quot;-|:|\.{2}&amp;quot;))
        n (last acc)
        start (if (nil? n) t-start (unshorten n t-start))  ; (3.1)
        end (inc (if (nil? t-end) start (unshorten start t-end)))
        step (if (nil? t-step) 1 t-step)]
    (into acc (range start end step))))  ; (3.2)

(defn parse-range [s]
  (println (join &amp;quot; &amp;quot; (reduce range-part [] (split s #&amp;quot;,&amp;quot;)))))  ; (2)

(seq (map parse-range (split-lines (slurp *in*))))  ; (1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1&#34;&gt;(1)&lt;/h5&gt;

&lt;p&gt;First we read input from stdin - its just the most convenient way to test/run and test after posting. Split input in lines and map our parse function over them. &lt;code&gt;seq&lt;/code&gt; function is called because &lt;code&gt;map&lt;/code&gt; is lazy and without creating sequence it well return nothing since parse won&amp;rsquo;t be called even once.&lt;/p&gt;

&lt;h5 id=&#34;2&#34;&gt;(2)&lt;/h5&gt;

&lt;p&gt;Then we split each line in smaller parts separated by comma, which will represent each individual range. And reduce these parts with function responsible for creating sequences. Then join results into one string separated with spaces and print it to stdout.&lt;/p&gt;

&lt;h5 id=&#34;3&#34;&gt;(3)&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;range-part&lt;/code&gt; function which generates sequences and adds to result accumulator only does performs preparation and utilizes built-in &lt;code&gt;range&lt;/code&gt; function. Data preparation consists of splitting each part into &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt; components and taking last value from result so we can know if current ones are in short form or not. Since some of components may be missing (except start of course) we check if they present and &lt;code&gt;unshorten&lt;/code&gt; them (3.1). After having all these parts we just create sequence and adding it to result vector (3.2).&lt;/p&gt;

&lt;h5 id=&#34;4&#34;&gt;(4)&lt;/h5&gt;

&lt;p&gt;Everything before that was pretty easy and straightforward for me right of the way. But that &lt;code&gt;unshorten&lt;/code&gt; thing really got me scratching my head, because right from the start I could tell that there is way to do that in constant time, but couldn&amp;rsquo;t actually get it. And on reddit is posted older solution with this operation hella not optimized. This is actually the reason for me to write it down - analyze everything and find better solution. So here it is in some details.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn unshorten [x y]  ; (4)
  (if (&amp;gt; y x)
    y
    (let [l-y (count (str y))
          pred-x (quot x (pow10 l-y))  ; (4.1)
          last-x (mod x (pow10 l-y))  ; (4.2)
          pred (if (&amp;lt; last-x y) pred-x (inc pred-x))]  ; (4.3)
      (Integer. (str pred y)))))  ; (4.4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all after converting numbers to integers I check if current number actually smaller than previous, because if not I just return it. Then I split previous number (&lt;code&gt;x&lt;/code&gt;) in two parts: one is right part with same length as current number (4.2) and second one is basically everything that comes to the left (4.1). After that split I need to decide what to add to the current number on the left side (since we now that right side will be our current number) and it either will be left part of previous number (if right side is smaller than current) as it is or it will be increased by one (4.3). And having those two parts of result I just concat them and convert back to integer (4.4).&lt;/p&gt;

&lt;p&gt;So this was a little break down of solution which I came up with, and since this Wednesday there was no intermedium task I had time to do it and analyze better.&lt;/p&gt;

&lt;p&gt;All sources for daily-programmer solutions I did can be found on &lt;a href=&#34;https://github.com/a-urth/daily-programmer&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>And there was word</title>
      <link>https://a-urth.github.io/post/and-there-was-word/</link>
      <pubDate>Wed, 16 Nov 2016 12:07:39 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/and-there-was-word/</guid>
      <description>&lt;p&gt;And it was when I finally decided to get myself some sort of general purpose site.&lt;/p&gt;

&lt;p&gt;This idea starts to concern every developer at some point. in one way or another everyone of us needs to store somewhere all of his/her ideas/thoughts/etc and preferably in one place.
Some create their one site from the scratch, others use one of the blogging platforms.
First approach is not interesting for me just because its not challenging or educational and second one seems to be not so adjustable and requires to much steps.
So, static site generator, markdown and github pages seems like silver bullet, at least for now.&lt;/p&gt;

&lt;p&gt;Lets see how it&amp;rsquo;ll go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://a-urth.github.io/about/</link>
      <pubDate>Tue, 15 Nov 2016 12:57:39 +0200</pubDate>
      
      <guid>https://a-urth.github.io/about/</guid>
      <description>

&lt;h2 id=&#34;hi-everyone-my-name-is-andrii&#34;&gt;Hi everyone, my name is Andrii&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m a software developer and this is what I do for living for my entire life.&lt;/p&gt;

&lt;h2 id=&#34;and-in-case-you-re-interested-in-me-as-employee&#34;&gt;And in case You&amp;rsquo;re interested in me as employee&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here is my &lt;a href=&#34;https://drive.google.com/open?id=1KmMzMexPT9TFW3aWdID0XkFcTxyJfQ-_QDUfMyeKj3c&#34;&gt;resume&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;And LinkedIn &lt;a href=&#34;https://www.linkedin.com/in/andrew-ursulenko-b2877028&#34;&gt;profile&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
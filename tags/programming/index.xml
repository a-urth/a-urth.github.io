<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Just Another Developer&#39;s Blog</title>
    <link>https://a-urth.github.io/tags/programming/index.xml</link>
    <description>Recent content on Just Another Developer&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://a-urth.github.io/about&#34;&gt;Andrii Ursulenko&lt;/a&gt; 2016</copyright>
    <atom:link href="https://a-urth.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Saturday morning - random coding problems solving</title>
      <link>https://a-urth.github.io/post/random-saturday-morning-coding-tasks/</link>
      <pubDate>Sat, 19 Nov 2016 11:31:39 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/random-saturday-morning-coding-tasks/</guid>
      <description>

&lt;p&gt;So I just randomly (from &lt;a href=&#34;http://reddit.com/r/coding&#34;&gt;/r/coding&lt;/a&gt; actually) came across this &lt;a href=&#34;http://www.gainlo.co/&#34;&gt;site&lt;/a&gt; which is built over idea of mocking interviews similar to big IT companies do. And it got my attention because it has some examples of programming tasks in its blog. Tasks, which I found seem to be not hard at all (authors mention this as well) and I think that such problems may be asked either for lower grade positions or during initial stages of interviewing process.&lt;/p&gt;

&lt;p&gt;But anyway, I found some of them really interesting and since I had some time this Saturday morning I thought - way not to sharpen my coding skills with beautiful clojure (because being python dev usually on interviews I&amp;rsquo;m doing them in python).&lt;/p&gt;

&lt;h5 id=&#34;move-zeroes-http-blog-gainlo-co-index-php-2016-11-18-uber-interview-question-move-zeroes&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/11/18/uber-interview-question-move-zeroes/&#34;&gt;Move Zeroes&lt;/a&gt;&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Modify the array by moving all the zeros to the end (right side). The order of other elements doesnâ€™t matter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I came with this straightforward solution. I know that it can be done better and in fact, later I did it in python in similar way which described in blog post. But this one sees to be neat and tiny.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def problem [1 2 0 3 0 1 2])

(defn reducer [[acc i] e]
  (if (zero? e)
    [acc (inc i)]
    [(conj acc e) i]))

(let [[non-zeros zeros-num] (reduce reducer [[] 0] problem)]
  (into non-zeros (repeat zeros-num 0)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I&amp;rsquo;m just going through list of values counting how much zeroes there are and filtering result for them. After that I&amp;rsquo;m just adding required number of zeroes to filtered values.&lt;/p&gt;

&lt;p&gt;In the blog post You can find better solution which requires data mutation, I think it can be written in &lt;code&gt;clojure&lt;/code&gt; as well but I just wasn&amp;rsquo;t interested in that.&lt;/p&gt;

&lt;h5 id=&#34;delimiter-matching-http-blog-gainlo-co-index-php-2016-09-30-uber-interview-question-delimiter-matching&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/09/30/uber-interview-question-delimiter-matching/&#34;&gt;Delimiter Matching&lt;/a&gt;&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Write an algorithm to determine if all of the delimiters in an expression are matched and closed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is pretty popular coding task and I&amp;rsquo;m pretty sure that everyone faced it in one way or another if they ever done some programming stuff on data structures. Because this is the most popular showcase for &lt;code&gt;stack&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def problem &amp;quot;[dklf(df(kl))d]{&amp;quot;)

(def brackets-m {\] \[, \} \{, \) \(})

(def closings (set (keys brackets-m)))

(def openings (set (vals brackets-m)))

(def error-msg &amp;quot;Delimiters unmatched!&amp;quot;)

(defn match? [o c] (= (get brackets-m c) o))

(defn process-sym [res s]
  (cond
    (contains? openings s) (conj res s)
    (contains? closings s) (if (match? (last res) s)
                             (drop-last res)
                             (throw (Exception. error-msg)))
    :else res))

(let [s (reduce process-sym [] problem)]
  (when (not (empty? s))
    (throw (Exception. error-msg))))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are plenty of &lt;code&gt;def&lt;/code&gt;s and helper function&amp;rsquo;s declaration but main idea is in &lt;code&gt;process-sym&lt;/code&gt; function. What id does is checks if we have other than bracket symbol - just continue, if its an opening bracket - put it into stack, if closing one - take last from stack and compare them. If they do not match each other - raise exception which means that delimiters are not matched. Same check is required after processing whole sequence - if there is still something in the stack, then raise exception. &lt;code&gt;nil&lt;/code&gt; returned if delimiters are matched. I did it with exceptions just because its easier to propagate error in &lt;code&gt;process-sym&lt;/code&gt; but it can be approached in some other ways.&lt;/p&gt;

&lt;h5 id=&#34;longest-substring-without-repeating-characters-http-blog-gainlo-co-index-php-2016-10-07-facebook-interview-longest-substring-without-repeating-characters&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/10/07/facebook-interview-longest-substring-without-repeating-characters/&#34;&gt;Longest Substring Without Repeating Characters&lt;/a&gt;&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a string, find the longest substring without repeating characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m sure that this one is also popular programming question but I actually never came across it. Right of the way I&amp;rsquo;ve noticed naive solution (check all substrings), but its obvious that this was not the most efficient one, so I&amp;rsquo;ve decided to think a little before writing even single character. Soon I found that we can store symbols in set to check for repeats and use two pointers for current substring and in case of repeat we should start next search from position of repeated symbol. But my mistake was that I wanted to use position of second repeated symbol instead of first one. In order to do that efficient I changed my set to map with symbols as keys and their indexes as values and it worked like a charm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def problem &amp;quot;abccdefdgh&amp;quot;)

(def problem-l (count problem))

(loop [start-i 0 end-i 0
       cur-syms-m {}]
  (if (= end-i problem-l)
    (subs problem start-i end-i)
    (let [cur-sym (get problem end-i)
          cur-i (get cur-syms-m cur-sym)
          next-end-i (inc end-i)]
      (if (nil? cur-i)
        (recur start-i next-end-i (conj cur-syms-m {cur-sym end-i}))
        (recur (inc cur-i) next-end-i {cur-sym cur-i})))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In blogpost You can find solution in python which uses similar but slightly different approach.&lt;/p&gt;

&lt;h5 id=&#34;design-hit-counter-http-blog-gainlo-co-index-php-2016-09-12-dropbox-interview-design-hit-counter&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/09/12/dropbox-interview-design-hit-counter/&#34;&gt;Design Hit Counter&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Interesting question on systems design, again, pretty common one. Only thing that I would like to add is if You need to count only unique visitors and we are talking about really big amount of data then speed and memory efficiency are much more important then exact answer, so approximation approaches such as &lt;a href=&#34;https://en.wikipedia.org/wiki/HyperLogLog&#34;&gt;HyperLoglog&lt;/a&gt; should be mentioned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Daily programmer (easy Monday)</title>
      <link>https://a-urth.github.io/post/daily-programmer-easy/</link>
      <pubDate>Thu, 17 Nov 2016 18:05:25 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/daily-programmer-easy/</guid>
      <description>

&lt;p&gt;Since this is first post on daily-programmer topic I need some introduction.
So there is this awesome sub reddit called &lt;a href=&#34;http://reddit.com/r/dailyprogrammer/&#34;&gt;DailyProgrammer&lt;/a&gt; where programming tasks on algorithms are posted 3 times a week. Easy ones on Mondays, intermedium ones on Tuesdays and hard ones on Friday. You can post Your solutions in favorite language and compile and test them directly in the comment section with &lt;code&gt;/u/CompileBot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been aware about this thing for already quite some time but never was able to stick with it for too long. Actually my last try lasted only for one easy task, which is hilarious, I know.&lt;/p&gt;

&lt;p&gt;And as You&amp;rsquo;ve already may guessed, since I&amp;rsquo;m some what trying to get closer to &lt;a href=&#34;http://clojure.org&#34;&gt;Clojure&lt;/a&gt;, recently I decided to do one more try with daily-programmer. Here is my solution to latest task at this moment (its description can be found &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/5d1l7v/20161115_challenge_292_easy_increasing_range/&#34;&gt;here&lt;/a&gt;), I&amp;rsquo;ll go through main points and my design decisions, mainly to do small repeat to myself and maybe improve something.&lt;/p&gt;

&lt;p&gt;Here is my solution and lets break it down into blocks&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Clojure&#34;&gt;(use &#39;[clojure.string :only [split split-lines join]])

(defn pow10 [i] (reduce * (repeat i 10)))

(defn unshorten [x y]  ; (4)
  (if (&amp;gt; y x)
    y
    (let [l-y (count (str y))
          pred-x (quot x (pow10 l-y))  ; (4.1)
          last-x (mod x (pow10 l-y))  ; (4.2)
          pred (if (&amp;lt; last-x y) pred-x (inc pred-x))]  ; (4.3)
      (Integer. (str pred y)))))  ; (4.4)

(defn range-part [acc s]  ; (3)
  (let [[t-start t-end t-step] (map #(Integer. %) (split s #&amp;quot;-|:|\.{2}&amp;quot;))
        n (last acc)
        start (if (nil? n) t-start (unshorten n t-start))  ; (3.1)
        end (inc (if (nil? t-end) start (unshorten start t-end)))
        step (if (nil? t-step) 1 t-step)]
    (into acc (range start end step))))  ; (3.2)

(defn parse-range [s]
  (println (join &amp;quot; &amp;quot; (reduce range-part [] (split s #&amp;quot;,&amp;quot;)))))  ; (2)

(seq (map parse-range (split-lines (slurp *in*))))  ; (1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1&#34;&gt;(1)&lt;/h5&gt;

&lt;p&gt;First we read input from stdin - its just the most convenient way to test/run and test after posting. Split input in lines and map our parse function over them. &lt;code&gt;seq&lt;/code&gt; function is called because &lt;code&gt;map&lt;/code&gt; is lazy and without creating sequence it well return nothing since parse won&amp;rsquo;t be called even once.&lt;/p&gt;

&lt;h5 id=&#34;2&#34;&gt;(2)&lt;/h5&gt;

&lt;p&gt;Then we split each line in smaller parts separated by comma, which will represent each individual range. And reduce these parts with function responsible for creating sequences. Then join results into one string separated with spaces and print it to stdout.&lt;/p&gt;

&lt;h5 id=&#34;3&#34;&gt;(3)&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;range-part&lt;/code&gt; function which generates sequences and adds to result accumulator only does performs preparation and utilizes built-in &lt;code&gt;range&lt;/code&gt; function. Data preparation consists of splitting each part into &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt; components and taking last value from result so we can know if current ones are in short form or not. Since some of components may be missing (except start of course) we check if they present and &lt;code&gt;unshorten&lt;/code&gt; them (3.1). After having all these parts we just create sequence and adding it to result vector (3.2).&lt;/p&gt;

&lt;h5 id=&#34;4&#34;&gt;(4)&lt;/h5&gt;

&lt;p&gt;Everything before that was pretty easy and straightforward for me right of the way. But that &lt;code&gt;unshorten&lt;/code&gt; thing really got me scratching my head, because right from the start I could tell that there is way to do that in constant time, but couldn&amp;rsquo;t actually get it. And on reddit is posted older solution with this operation hella not optimized. This is actually the reason for me to write it down - analyze everything and find better solution. So here it is in some details.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn unshorten [x y]  ; (4)
  (if (&amp;gt; y x)
    y
    (let [l-y (count (str y))
          pred-x (quot x (pow10 l-y))  ; (4.1)
          last-x (mod x (pow10 l-y))  ; (4.2)
          pred (if (&amp;lt; last-x y) pred-x (inc pred-x))]  ; (4.3)
      (Integer. (str pred y)))))  ; (4.4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all after converting numbers to integers I check if current number actually smaller than previous, because if not I just return it. Then I split previous number (&lt;code&gt;x&lt;/code&gt;) in two parts: one is right part with same length as current number (4.2) and second one is basically everything that comes to the left (4.1). After that split I need to decide what to add to the current number on the left side (since we now that right side will be our current number) and it either will be left part of previous number (if right side is smaller than current) as it is or it will be increased by one (4.3). And having those two parts of result I just concat them and convert back to integer (4.4).&lt;/p&gt;

&lt;p&gt;So this was a little break down of solution which I came up with, and since this Wednesday there was no intermedium task I had time to do it and analyze better.&lt;/p&gt;

&lt;p&gt;All sources for daily-programmer solutions I did can be found on &lt;a href=&#34;https://github.com/a-urth/daily-programmer&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Occasionally writing</title>
    <link>https://a-urth.github.io/tags/weeklyfeature/index.xml</link>
    <description>Recent content on Occasionally writing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://a-urth.github.io/about&#34;&gt;Andrii Ursulenko&lt;/a&gt; 2016</copyright>
    <atom:link href="https://a-urth.github.io/tags/weeklyfeature/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Weekly feature - first for December 2016</title>
      <link>https://a-urth.github.io/post/weekly-feature-201612-1/</link>
      <pubDate>Fri, 02 Dec 2016 14:13:09 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/weekly-feature-201612-1/</guid>
      <description>

&lt;p&gt;Another weekly feature edition. Couple of interesting videos this time!&lt;/p&gt;

&lt;h4 id=&#34;articles-on-software-development-stuff&#34;&gt;Articles on software development stuff&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;One of the most popular python packages &amp;ldquo;requests&amp;rdquo; shipped big changes which break backward compatibility and why its like that. [&lt;a href=&#34;https://lukasa.co.uk/2016/11/Five_Whys_Requests_212/&#34;&gt;https://lukasa.co.uk/2016/11/Five_Whys_Requests_212/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Pythonic ways to avoid using for loops and making your code better. [&lt;a href=&#34;https://medium.com/python-pandemonium/never-write-for-loops-again-91a5a4c84baf#.b7hthkn2a&#34;&gt;https://medium.com/python-pandemonium/never-write-for-loops-again-91a5a4c84baf#.b7hthkn2a&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;A lot of great materials about interview questions and problems. Really good stuff to prepare yourself or just to find some new challenge. [&lt;a href=&#34;https://github.com/MaximAbramchuck/awesome-interview-questions&#34;&gt;https://github.com/MaximAbramchuck/awesome-interview-questions&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Advent of code 2016 is here! Interesting problems, really cool challenge. [&lt;a href=&#34;http://adventofcode.com/&#34;&gt;http://adventofcode.com/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Comparison of different &lt;code&gt;clojure&lt;/code&gt; polymorphism approaches in terms of performance and applicability. [&lt;a href=&#34;http://insideclojure.org/2015/04/27/poly-perf/&#34;&gt;http://insideclojure.org/2015/04/27/poly-perf/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Clojure&lt;/code&gt; print functions - why there are so many of them and whats the purpose of each. [&lt;a href=&#34;http://blog.klipse.tech//clojure/2016/11/24/stringify-clojure.html&#34;&gt;http://blog.klipse.tech//clojure/2016/11/24/stringify-clojure.html&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Maybe the best GUI for git in terms of functionality. [&lt;a href=&#34;http://gitup.co&#34;&gt;http://gitup.co&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Cool note about macro in &lt;code&gt;c&lt;/code&gt;. [&lt;a href=&#34;http://www.pixelstech.net/article/1390482950-do-%7B-%7D-while-%280%29-in-macros&#34;&gt;http://www.pixelstech.net/article/1390482950-do-%7B-%7D-while-%280%29-in-macros&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Again &lt;code&gt;c&lt;/code&gt;, comparing in to punk-rock music. It may sound strange but the article itself is very interesting, it traces &lt;code&gt;c&lt;/code&gt; origin and development. [&lt;a href=&#34;https://pragprog.com/magazines/2011-03/punk-rock-languages&#34;&gt;https://pragprog.com/magazines/2011-03/punk-rock-languages&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Cuckoo filters for counting unique values comparing to bloom filters. [&lt;a href=&#34;http://blog.fastforwardlabs.com/post/153566952648/probabilistic-data-structure-showdown-cuckoo&#34;&gt;http://blog.fastforwardlabs.com/post/153566952648/probabilistic-data-structure-showdown-cuckoo&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Brief and on-point note about key responsibilities and qualities of a good architect. [&lt;a href=&#34;https://www.thekua.com/atwork/2016/11/the-well-rounded-architect/&#34;&gt;https://www.thekua.com/atwork/2016/11/the-well-rounded-architect/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting and valid in my opinion point of view on naming things (different sort of handlers especially) with examples in &lt;code&gt;javascript&lt;/code&gt;. And interestingly enough that I had same thoughts on this topic, few days ago. [&lt;a href=&#34;http://nikas.praninskas.com/javascript/2016/11/28/naming-things-handlers/&#34;&gt;http://nikas.praninskas.com/javascript/2016/11/28/naming-things-handlers/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Great real life stories about software development mistakes. Definitely worth attention. [&lt;a href=&#34;https://softwareclown.com&#34;&gt;https://softwareclown.com&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Feature factory, what is it and what are signs that You are in it. [&lt;a href=&#34;https://hackernoon.com/12-signs-youre-working-in-a-feature-factory-44a5b938d6a2#.jyt9u529z&#34;&gt;https://hackernoon.com/12-signs-youre-working-in-a-feature-factory-44a5b938d6a2#.jyt9u529z&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Quite interesting reading on guy&amp;rsquo;s experience creating &lt;code&gt;ios&lt;/code&gt; game with &lt;code&gt;phonegap&lt;/code&gt; and why its not that good as you can expect. [&lt;a href=&#34;https://bokstuff.com/i-made-an-iphone-game-with-phonegap-and-ill-never-do-it-again/&#34;&gt;https://bokstuff.com/i-made-an-iphone-game-with-phonegap-and-ill-never-do-it-again/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;I wrote whole post only about this particular article which I found last weekend, so You can find my opinion/angry-rant about that &lt;a href=&#34;https://a-urth.github.io/post/random-coding-and-is-shorter-better/&#34;&gt;here&lt;/a&gt; [&lt;a href=&#34;https://www.new2code.com/2016/11/proof-you-can-become-a-better-programmer/&#34;&gt;https://www.new2code.com/2016/11/proof-you-can-become-a-better-programmer/&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;articles-on-other-interesting-topics&#34;&gt;Articles on other interesting topics&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Interesting reading about ambitious space programs which were never implemented in real life. [&lt;a href=&#34;https://geektimes.ru/company/mailru/blog/282874/&#34;&gt;https://geektimes.ru/company/mailru/blog/282874/&lt;/a&gt;] &lt;strong&gt;RUS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Very interesting article about easter eggs in GTA and what it takes to find them. [&lt;a href=&#34;http://arstechnica.com/gaming/2016/11/easter-eggs-evolved-why-gamers-spent-3-years-plus-studying-gtavs-mount-chiliad/&#34;&gt;http://arstechnica.com/gaming/2016/11/easter-eggs-evolved-why-gamers-spent-3-years-plus-studying-gtavs-mount-chiliad/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Rapid fire Q&amp;amp;A about artificial intelligence. If you had some questions, than there is high chance that You&amp;rsquo;ll find answers here. [&lt;a href=&#34;http://people.eecs.berkeley.edu/~russell/temp/q-and-a.html&#34;&gt;http://people.eecs.berkeley.edu/~russell/temp/q-and-a.html&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;videos&#34;&gt;Videos&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Interesting video especially for non familiar with web on how passwords are stored. [&lt;a href=&#34;https://www.youtube.com/watch?v=yoMOAIzBSpY&#34;&gt;https://www.youtube.com/watch?v=yoMOAIzBSpY&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Leap second - what is it and why its so hard to handle it. [&lt;a href=&#34;https://www.youtube.com/watch?v=Uqjg8Kk1HXo&#34;&gt;https://www.youtube.com/watch?v=Uqjg8Kk1HXo&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Code girl trolling, nuff said. Simply great talk. [&lt;a href=&#34;https://www.youtube.com/watch?v=wewAC5X_CZ8&#34;&gt;https://www.youtube.com/watch?v=wewAC5X_CZ8&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Very famous Rich Hickie&amp;rsquo;s talk on transducers in &lt;code&gt;clojure&lt;/code&gt;. [&lt;a href=&#34;https://www.youtube.com/watch?v=6mTbuzafcII&#34;&gt;https://www.youtube.com/watch?v=6mTbuzafcII&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Cool video on sorting algorithms for non developers. [&lt;a href=&#34;https://www.youtube.com/watch?v=WaNLJf8xzC4&#34;&gt;https://www.youtube.com/watch?v=WaNLJf8xzC4&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Weekly feature - second and last for November 2016</title>
      <link>https://a-urth.github.io/post/weekly-feature-201611-2/</link>
      <pubDate>Fri, 25 Nov 2016 14:35:40 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/weekly-feature-201611-2/</guid>
      <description>

&lt;p&gt;Again I&amp;rsquo;m bringing pile of articles I&amp;rsquo;ve read this week and found them interesting enough to share.&lt;/p&gt;

&lt;p&gt;The most interesting things in my opinion were those tensioned discussions all over the internet about Zed Show&amp;rsquo;s article on python 3. Also I&amp;rsquo;ve read some materials on CAP theorem, yes, again, to clarify missing moments for me one more time. And I finally found book on Clojure for myself. I twice dismissed &lt;code&gt;Brave and true&lt;/code&gt;, its not bad in any sense, but just doesn&amp;rsquo;t fit my needs. &lt;code&gt;Programming clojure&lt;/code&gt; on the other hand appeared to be very interesting and informative reading. In couple of weeks I hope I&amp;rsquo;ll do a review for that.&lt;/p&gt;

&lt;h4 id=&#34;articles-on-software-development-stuff&#34;&gt;Articles on software development stuff&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Interesting bug related with hash tables in &lt;code&gt;rust&lt;/code&gt; which made lookup/insert operations go quadratic and interesting discussion also. [&lt;a href=&#34;https://www.reddit.com/r/programming/comments/5eow80/rusts_standard_hash_table_types_could_go/&#34;&gt;https://www.reddit.com/r/programming/comments/5eow80/rusts_standard_hash_table_types_could_go/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Incredible amount of different materials on CS topics. Simply treasure. [&lt;a href=&#34;https://github.com/Developer-Y/cs-video-courses/blob/master/README.md#data-structures-and-algorithms&#34;&gt;https://github.com/Developer-Y/cs-video-courses/blob/master/README.md#data-structures-and-algorithms&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Weird stuff from the author of the one of most popular courses for python newbies. Almost all arguments are like from another planet and tone of the article is so pretentious [&lt;a href=&#34;https://learnpythonthehardway.org/book/nopython3.html&#34;&gt;https://learnpythonthehardway.org/book/nopython3.html&lt;/a&gt;] and great response to it [&lt;a href=&#34;https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/&#34;&gt;https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/&lt;/a&gt;] and sort of post mortem from author [&lt;a href=&#34;https://zedshaw.com/2016/11/24/the-end-of-coder-influence/&#34;&gt;https://zedshaw.com/2016/11/24/the-end-of-coder-influence/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Brief introduction to &lt;code&gt;go&lt;/code&gt; interfaces. [&lt;a href=&#34;http://www.calhoun.io/how-do-interfaces-work-in-go/&#34;&gt;http://www.calhoun.io/how-do-interfaces-work-in-go/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Insane overview of distributed systems class from Aphyr. [&lt;a href=&#34;https://github.com/aphyr/distsys-class&#34;&gt;https://github.com/aphyr/distsys-class&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Which rules provide for user&amp;rsquo;s passwords in 2016. [&lt;a href=&#34;https://nakedsecurity.sophos.com/2016/08/18/nists-new-password-rules-what-you-need-to-know/&#34;&gt;https://nakedsecurity.sophos.com/2016/08/18/nists-new-password-rules-what-you-need-to-know/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Rapid intro to Lisp. [&lt;a href=&#34;https://hackernoon.com/learn-you-a-lisp-in-0-minutes-e0c1a060a178#.wnnx02rfe&#34;&gt;https://hackernoon.com/learn-you-a-lisp-in-0-minutes-e0c1a060a178#.wnnx02rfe&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Great reading on very clever simplification for inverse square root and why its important. [&lt;a href=&#34;http://h14s.p5r.org/2012/09/0x5f3759df.html&#34;&gt;http://h14s.p5r.org/2012/09/0x5f3759df.html&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Yet another stone thrown at python by one of its long term users. I&amp;rsquo;m kinda agreed with point of view of Jeff in terms that python code is really hard maintainable in bigger scale and in longer terms especially with big teams. Not that its bad language by any means, it just compromises some safety, speed and robustness in favor to simplicity (at least on the surface) and user friendliness. I&amp;rsquo;m caught by myself not even once that I&amp;rsquo;m missing static typing in python badly. [&lt;a href=&#34;https://jeffknupp.com/blog/2016/11/13/how-python-makes-working-with-data-more-difficult-in-the-long-run/&#34;&gt;https://jeffknupp.com/blog/2016/11/13/how-python-makes-working-with-data-more-difficult-in-the-long-run/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting note on trailing slashes for URIs. Never actually fought about such problem, but this week I faced it and decided to do some investigation. This article seems to be the most reasonable explanation. Note that for REST it will slightly differ. [&lt;a href=&#34;https://cdivilly.wordpress.com/2014/03/11/why-trailing-slashes-on-uris-are-important/&#34;&gt;https://cdivilly.wordpress.com/2014/03/11/why-trailing-slashes-on-uris-are-important/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;This looks so weird that I can&amp;rsquo;t even say what am I thinking about that. This looks interesting and pretentious at the same time. New programming language, new platform, new paradigm? [&lt;a href=&#34;https://hackernoon.com/how-eve-unifies-your-entire-programming-stack-900ca80c58a7#.hwfuncwxs&#34;&gt;https://hackernoon.com/how-eve-unifies-your-entire-programming-stack-900ca80c58a7#.hwfuncwxs&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Semaphore and deadlock explained as easy as it can gets. [&lt;a href=&#34;https://www.reddit.com/r/compsci/comments/5e08s5/eli5_semaphores_and_the_producerconsumer_problem/&#34;&gt;https://www.reddit.com/r/compsci/comments/5e08s5/eli5_semaphores_and_the_producerconsumer_problem/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Couple of articles on infamous CAP theorem.

&lt;ul&gt;
&lt;li&gt;Briefly what is it all about - [&lt;a href=&#34;https://jvns.ca/blog/2016/11/19/a-critique-of-the-cap-theorem/&#34;&gt;https://jvns.ca/blog/2016/11/19/a-critique-of-the-cap-theorem/&lt;/a&gt;] which lead me to next two.&lt;/li&gt;
&lt;li&gt;Almost the same but with much more details, great reading actually. [&lt;a href=&#34;https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed&#34;&gt;https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed&lt;/a&gt;].&lt;/li&gt;
&lt;li&gt;Also great read with similar arguments but with better explanation of terminology and issues and with tons of links to other great materials. [&lt;a href=&#34;https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html&#34;&gt;https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Interesting point of view on how abstractions affect our code with time and different people and why its better to simplify them right from the start and even rewrite with time. [&lt;a href=&#34;http://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction&#34;&gt;http://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting site which promises to provide developer mock interview same as it in those dream companies like Amazon, Uber, Facebook etc. I found its interesting because of blog and couple of articles about pretty cool interview question, generally programming ones. [&lt;a href=&#34;http://www.gainlo.co/&#34;&gt;http://www.gainlo.co/&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;articles-on-other-interesting-topics&#34;&gt;Articles on other interesting topics&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Valid rant on new USB-C ports and their wide capabilities and why it will be very misleading for regular customers and bad for market in general. &lt;a href=&#34;__RUS__&#34;&gt;https://geektimes.ru/post/282824/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Got my jaw dropped after reading that something like that exists - prime number which in binary form represents program to brake DVD protection. [&lt;a href=&#34;https://en.wikipedia.org/wiki/Illegal_prime&#34;&gt;https://en.wikipedia.org/wiki/Illegal_prime&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Flaws of deterministic password managers. And I actually didn&amp;rsquo;t even know that such exists. Anyway after reading this article I don&amp;rsquo;t think that I would try some. [&lt;a href=&#34;https://tonyarcieri.com/4-fatal-flaws-in-deterministic-password-managers&#34;&gt;https://tonyarcieri.com/4-fatal-flaws-in-deterministic-password-managers&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Very interesting reading on ternary machines. I&amp;rsquo;ve already read ones about such unique computers and that they were more efficient calculation wise than binary ones. But I never thought actually why. And the most interesting thing for me appeared that worldwide usage of binary systems is explained by easiness and low price of production. Is it possible for all of us to switch to some other systems if we&amp;rsquo;ll actually learn how to make production of those ternary elements cheap? [&lt;a href=&#34;https://dev.to/buntine/the-balanced-ternary-machines-of-soviet-russia&#34;&gt;https://dev.to/buntine/the-balanced-ternary-machines-of-soviet-russia&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Why Apple&amp;rsquo;s new macbook pros have only 16Gb of RAM? [&lt;a href=&#34;https://macdaddy.io/macbook-pro-limited-16gb-ram/&#34;&gt;https://macdaddy.io/macbook-pro-limited-16gb-ram/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting confession of mature developer about stuff he did as a youngster. Definitely worth reading and thinking about what ACTUALLY we are doing while write code. [&lt;a href=&#34;https://medium.freecodecamp.com/the-code-im-still-ashamed-of-e4c021dff55e#.dht7gjk43&#34;&gt;https://medium.freecodecamp.com/the-code-im-still-ashamed-of-e4c021dff55e#.dht7gjk43&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Great application for Mac OS on recreating pictures in primitive shapes. It looks really awesome! [&lt;a href=&#34;https://primitive.lol&#34;&gt;https://primitive.lol&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Weekly feature - first for November 2016</title>
      <link>https://a-urth.github.io/post/weekly-feature-201611-1/</link>
      <pubDate>Fri, 18 Nov 2016 17:01:26 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/weekly-feature-201611-1/</guid>
      <description>

&lt;p&gt;So this is one of the things I actually started running this blog for. I want to collect all written/watched/seen stuff related to software development, IT in general or simply something interesting in one place and post it weekly in sort of digest.&lt;/p&gt;

&lt;p&gt;Since I&amp;rsquo;m doing this strictly for myself there will be no language or technology specific stuff, but just anything I&amp;rsquo;ve read or seen during week and found interesting for myself. And since its first issue I&amp;rsquo;ll add couple of items which I&amp;rsquo;ve found little bit more than a week ago. Also all articles are in English if other not specified in braces after link.&lt;/p&gt;

&lt;p&gt;So lets start.&lt;/p&gt;

&lt;h4 id=&#34;articles-on-software-development-stuff&#34;&gt;Articles on software development stuff&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;What to use for game development in python. Regardless possible argument that no one actually writes games in python (and its just wrong assumption) its interesting discussion. I remember me just getting into all this python stuff almost 4 years ago I also was thinking about what to use. PyGame was sort of goto solution because of its popularity mainly. But seems that now its almost completely dead and there is no strict answer to that question. [&lt;a href=&#34;https://www.reddit.com/r/Python/comments/5dgp20/if_the_pyglet_community_is_dead_and_pygame_is_not/&#34;&gt;https://www.reddit.com/r/Python/comments/5dgp20/if_the_pyglet_community_is_dead_and_pygame_is_not/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Materialized views in pg 9.4, briefly. [&lt;a href=&#34;http://bonesmoses.org/2015/03/06/pg-phriday-materialized-views-revisited/&#34;&gt;http://bonesmoses.org/2015/03/06/pg-phriday-materialized-views-revisited/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting practical thoughts on how to write OOP code that doesn&amp;rsquo;t suck. Especially crucial nowadays when it seems that no one pays attention to OOP. [&lt;a href=&#34;https://dev.to/naveen/how-to-write-an-object-oriented-program-that-doesnt-suck&#34;&gt;https://dev.to/naveen/how-to-write-an-object-oriented-program-that-doesnt-suck&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Another round of frameworks battle is down and there are some interesting results. For me the most interesting thing appeared that all somewhat fast python frameworks use &lt;a href=&#34;http://meinheld.org&#34;&gt;Meinheld&lt;/a&gt; as a web server, which, to my shame, I&amp;rsquo;ve never heard of. Also I&amp;rsquo;ve been surprised that &lt;code&gt;gin&lt;/code&gt; framework for &lt;code&gt;go&lt;/code&gt; is so fast in json serialization test and ok for all others (last is expected). In more real life tests with db usage &lt;code&gt;fasthttp&lt;/code&gt; is still the king. Also have no idea whats up with top 3 &lt;code&gt;Dart&lt;/code&gt; frameworks in multiple queries test. [&lt;a href=&#34;https://www.techempower.com/benchmarks/#section=data-r13&amp;amp;hw=ph&amp;amp;test=query&#34;&gt;https://www.techempower.com/benchmarks/#section=data-r13&amp;amp;hw=ph&amp;amp;test=query&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting reading on &lt;code&gt;go&lt;/code&gt;&amp;rsquo;s specifics or I&amp;rsquo;d rather say tricks and gotchas. Yes, they exist, but usually obvious and definitely not so ridiculous as javascript ones for example. I&amp;rsquo;m not that proficient in &lt;code&gt;go&lt;/code&gt; but even I knew almost all of them. &lt;a href=&#34;__RUS__&#34;&gt;https://habrahabr.ru/company/mailru/blog/314804/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Good old stuff from famous Aphyr on RabbitMQ&amp;rsquo;s approaches to clustering and possible tradeoffs. I&amp;rsquo;ve already read in once but just wanted to remind myself what was the problem and how to avoid it. [&lt;a href=&#34;https://aphyr.com/posts/315-jepsen-rabbitmq&#34;&gt;https://aphyr.com/posts/315-jepsen-rabbitmq&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Cool point on why iterating in python over unordered collection is slower than on ordered one. [&lt;a href=&#34;https://rickystewart.wordpress.com/2013/09/03/why-sorting-an-array-makes-a-python-loop-faster/&#34;&gt;https://rickystewart.wordpress.com/2013/09/03/why-sorting-an-array-makes-a-python-loop-faster/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting brief introduction to general purpose retrying in programming with examples in python/flask from Miguel Grinberg. [&lt;a href=&#34;https://blog.miguelgrinberg.com/post/how-to-retry-with-class&#34;&gt;https://blog.miguelgrinberg.com/post/how-to-retry-with-class&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Interesting and motivational reading about building right attitude for game development, especially when You&amp;rsquo;re trying to get Your first game done. [&lt;a href=&#34;http://howtomakeanrpg.com/a/not-your-problem.html&#34;&gt;http://howtomakeanrpg.com/a/not-your-problem.html&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;articles-on-other-interesting-topics&#34;&gt;Articles on other interesting topics&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Some stories and historical facts about how different people - famous and not - used algorithms in day-to-day life. And general overview on what are algorithms and why You should care about them for non computer science folks. &lt;a href=&#34;__RUS__&#34;&gt;https://newtonew.com/discussions/algorithms-to-live-by&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Entertainment reading on how to control vertical alignment of skyscraper during its construction. Which techniques used and how do they work. &lt;a href=&#34;__RUS__&#34;&gt;https://geektimes.ru/company/lakhta_center/blog/282584/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interesting story about young fella who tried to create his own nuclear power station and how it ended (spoiler - it ended badly). &lt;a href=&#34;__RUS__&#34;&gt;https://geektimes.ru/post/282594/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Very interesting research on distribution of computer skills and how it should affect our thoughts about target auditory for software we build. [&lt;a href=&#34;https://www.nngroup.com/articles/computer-skill-levels/&#34;&gt;https://www.nngroup.com/articles/computer-skill-levels/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Couple of cheerful words from great blogger WaitButWhy on latest USA elections. Generally what he tries to say that every one has its one opinion and You actually should not be so afraid of what happened. [&lt;a href=&#34;http://waitbutwhy.com/2016/11/its-going-to-be-okay.html&#34;&gt;http://waitbutwhy.com/2016/11/its-going-to-be-okay.html&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;And for something completely different - Ukrainian military forces presented new rocket launcher which apparently uses&amp;hellip; RaspberryPi. Yeah&amp;hellip; It may be complete bullshit but also may be really interesting usage of this neat small computer. And this case actually reminded me some cool &lt;a href=&#34;https://en.wikipedia.org/wiki/PlayStation_3_cluster&#34;&gt;usage of PS3&lt;/a&gt;, so don&amp;rsquo;t underestimate brave engineering approaches. [&lt;a href=&#34;http://www.popularmechanics.com/military/weapons/a23774/raspberry-pi-ukrainian-weapon-system/&#34;&gt;http://www.popularmechanics.com/military/weapons/a23774/raspberry-pi-ukrainian-weapon-system/&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;videos&#34;&gt;Videos&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;EuroClojure 2016 and there are some great speakers with tons of cool stuff. Just watched couple of them and it seems really interesting. [&lt;a href=&#34;https://www.youtube.com/playlist?list=PLZdCLR02grLowQLPjuZ7k3pl2ScEyW7A7&#34;&gt;https://www.youtube.com/playlist?list=PLZdCLR02grLowQLPjuZ7k3pl2ScEyW7A7&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;LabmdaConf 2016 happened In September (yeah, two months passed Andrii). Watched through couple of most viewed but didn&amp;rsquo;t quite find something really interesting for me. [&lt;a href=&#34;https://www.youtube.com/channel/UCEtohQeDqMSebi2yvLMUItg/videos&#34;&gt;https://www.youtube.com/channel/UCEtohQeDqMSebi2yvLMUItg/videos&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Almost all that stuff can be found also on my &lt;a href=&#34;http://twitter.com/a_ursulenko&#34;&gt;twitter&lt;/a&gt; there I&amp;rsquo;ll post it just as found.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
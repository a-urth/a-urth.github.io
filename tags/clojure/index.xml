<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Just Another Developer&#39;s Blog</title>
    <link>https://a-urth.github.io/tags/clojure/index.xml</link>
    <description>Recent content on Just Another Developer&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://a-urth.github.io/about&#34;&gt;Andrii Ursulenko&lt;/a&gt; 2016</copyright>
    <atom:link href="https://a-urth.github.io/tags/clojure/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sunday night random coding and some thoughts on better programming</title>
      <link>https://a-urth.github.io/post/random-coding-and-is-shorter-better/</link>
      <pubDate>Mon, 28 Nov 2016 12:32:27 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/random-coding-and-is-shorter-better/</guid>
      <description>&lt;p&gt;So it was Sunday late evening and I&amp;rsquo;m, almost sleeping, randomly cruising through reddit, came to this &lt;a href=&#34;https://www.new2code.com/2016/11/proof-you-can-become-a-better-programmer/&#34;&gt;article&lt;/a&gt;. In which author shares his experience of becoming &amp;ldquo;better programmer&amp;rdquo;, and I found it some what controversial for me. Generally he takes two common programming problems and compares how he did them in the start of his programming career and now. This is cool short reading itself and 100% educational, but in my opinion for another reason than author thought.&lt;/p&gt;

&lt;p&gt;First one is great because it utilizes language features at its best. I&amp;rsquo;m not sure that its much more readable, but definitely shorter and, let me say, smarter way.&lt;/p&gt;

&lt;p&gt;But second one is not so obvious and even controversial in my opinion, but let me explain myself. First of all this kind of programming task is quite common and I even wrote solutions by myself in &lt;code&gt;clojure&lt;/code&gt;, both for problem author describes and more common one, as mention in comments, counting for consecutive characters, here they are.&lt;/p&gt;

&lt;p&gt;Characters counting and shortening&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn chars-count [s]
  (fn reducer [acc c]
    (let [n (acc c)] (assoc acc c (if n (inc n) 1))))
  (clojure.string/join (for [[c n] (reduce reducer {} s)] (str c n))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Consecutive&lt;/strong&gt;  characters counting and shortening&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn compact [s]
  (loop [[char &amp;amp; rest] s
         last-char &amp;quot;&amp;quot;
         acc &amp;quot;&amp;quot;
         count 1]
    (if (nil? char)
      (str acc last-char count)
      (if (= last-char char)
        (recur rest char acc (inc count))
        (let [res (if (= last-char &amp;quot;&amp;quot;) acc (str acc last-char count))]
          (recur rest char res 1))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As usual I&amp;rsquo;m not even trying to say that these are top notch solutions and there is no way to do it better, its just my version written being sleepy on Sunday late evening.&lt;/p&gt;

&lt;p&gt;Now, why I don&amp;rsquo;t like authors solution to second problem and why I&amp;rsquo;m thinking that its bad way to code. Yes, it again utilizes language features and is much shorter, but by what cost? Its absolutely not efficient and complexity of such solution is nowhere close to required one. Its pointed in comments couple of times and on &lt;a href=&#34;https://www.reddit.com/r/programming/comments/5f5rzg/proof_you_can_become_a_better_programmer_new_to/&#34;&gt;reddit&lt;/a&gt; thread there link to this article was posted. And the thing I disagree with the most is the point that such way is &amp;ldquo;better&amp;rdquo;, when its actually not. Its shorter/cooler/smarter/you name it but not more efficient or even readable, actually in terms of efficiency its even worse than first one. Doing this way shows that You actually doesn&amp;rsquo;t care about what and how Your code do, but care about how it looks instead. And author says that he would do it in other (correct) way if it would be some kind of interview with execution time or any other limitations which he cannot exceed. But the thing is that in real life You never now what are these limitations and when You&amp;rsquo;ll exceed them. You write solution like that and Your application performs super good with no load and as customers start to visit Your web page (for example) CPUs in Your servers are melting because while You&amp;rsquo;ve been coding Your neat solution You didn&amp;rsquo;t actually think that O(n) is way better than O(N^2) and this code will fuck up Your whole application.&lt;/p&gt;

&lt;p&gt;And arguments like &amp;ldquo;in such little problem real efficiency doesn&amp;rsquo;t matter, its just an example&amp;rdquo; are doing everything even worser. Because by doing such tasks You gaining programming habits and skills, and if You don&amp;rsquo;t care about how Your code performs than You&amp;rsquo;ll never be &amp;ldquo;better programmer&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;This case reminded me &lt;a href=&#34;https://www.codewars.com/kata/most-frequent-elements/solutions/python&#34;&gt;this task&lt;/a&gt; which is almost the same and even most voted solution is similar.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def find_most_frequent(l):
    return set(x for x in set(l) if l.count(x) == max([l.count(y) for y in l]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its just ridiculous how this thing is slow on bigger inputs and no wonder because its O(N^3) since &lt;code&gt;count&lt;/code&gt; is O(N) and its done for each element of the input list on each iteration&amp;hellip; This is actually great example of how You should &lt;strong&gt;NOT&lt;/strong&gt; write code. You can compare it with other solutions on that page which utilize regular python&amp;rsquo;s &lt;code&gt;dict&lt;/code&gt; and even better ones with &lt;code&gt;Counter&lt;/code&gt; which are actually smart and pythonic in my opinion.&lt;/p&gt;

&lt;p&gt;So, all I wanted to say is that shorter solutions are not always &amp;ldquo;better&amp;rdquo; or even more readable ones. Never compromising performance of Your code and still finding way to make it look great, understanding and realizing &lt;strong&gt;how&lt;/strong&gt; Your code works and &lt;strong&gt;what&lt;/strong&gt; it actually does on each step - this is true meaning of being &amp;ldquo;better programmer&amp;rdquo; in my opinion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Daily programmer - saturday defusal</title>
      <link>https://a-urth.github.io/post/daily-programmer-intermediate-2/</link>
      <pubDate>Sun, 27 Nov 2016 10:44:08 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/daily-programmer-intermediate-2/</guid>
      <description>&lt;p&gt;Right of the way gonna say that doing it on Saturday just because didn&amp;rsquo;t feel like doing it at all. This task is based on Mondays one and consists of two parts. Task is &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/5emuuy/20161124_challenge_293_intermediate_defusing_the/&#34;&gt;here&lt;/a&gt;, latest solution is &lt;a href=&#34;https://github.com/a-urth/daily-programmer/tree/master/20161124_intermediate&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So with regular task I came pretty quickly and there is really nothing special comparing with easy one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def wire-rules {:s0 {\w :s1, \r :s2}
                 :s1 {\w :s2, \o :s3}
                 :s2 {\b :s3, \r :s0}
                 :s3 {\b :s3, \o :s4, \g :s5}
                 :s4 {\g :exit}
                 :s5 {\o :exit}})

(defn end? [kw] (= kw :exit))

(defn defuse
  ([wires]
   (defuse wires :s0))

  ([[wire &amp;amp; others] cur-step]
   (let [next-step ((wire-rules cur-step) wire)]
     (condp = next-step
       :exit true
       nil false
       (recur others next-step)))))

(defn defuse-bomb [i wires]
  (println
   (if (defuse (map first (split-lines wires)))
     (format &amp;quot;%s - Bomb defused&amp;quot; i)
     (format &amp;quot;%s - Booom&amp;quot; i))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rules are now represented is slightly different form, &lt;code&gt;defuse&lt;/code&gt; function as well, but  its all pretty straightforward. The only thing I changed is implemented &lt;code&gt;condp&lt;/code&gt; part in &lt;code&gt;defuse&lt;/code&gt; function (saw it in other solution on reddit). Previously I had &lt;code&gt;if-let&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt; which was not so good looking in my opinion.&lt;/p&gt;

&lt;p&gt;While first part was pretty easy, there is bonus one, which is an interesting one. I&amp;rsquo;ve spent some time on solution design and came up with recursive algorithm with backtracking which looks something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn wires-&amp;gt;map [wires]
  (into {} (for [wire-row (split-lines wires)
                 :let [[wire n] (split wire-row #&amp;quot; &amp;quot;)]]
             [(first wire) (Integer. n)])))

(defn no-wires-left? [wires-m] (every? zero? (vals wires-m)))

(defn defusable?
  ([wires-m]
   (defusable? wires-m :s0))

  ([wires-m step]
   (if (end? step)  ; (1)
     (no-wires-left? wires-m)  ; (2)
     (loop [[[wire next-step] &amp;amp; other] (seq (wire-rules step))]  ; (3)
       (if (nil? wire)
         false
         (let [wire-n (wires-m wire)]
           (if (and
                (not (zero? wire-n))  ; (4)
                (defusable? (assoc wires-m wire (dec wire-n)) next-step))  ; (5)
             true
             (recur other))))))))

(defn check-bomb [i wires]
  (println
   (if (defusable? (wires-&amp;gt;map wires))
     (format &amp;quot;%s - Defusable&amp;quot; i)
     (format &amp;quot;%s - Not defusable&amp;quot; i))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I have two helper functions - one for converting input to map with wire colors as keys and number of wires as values (&lt;code&gt;wires-&amp;gt;map&lt;/code&gt;), and second for checking if there are still some wires left after finding correct solution (&lt;code&gt;no-wires-left?&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The thing I don&amp;rsquo;t like is how &lt;code&gt;defusable?&lt;/code&gt; function looks like. General idea behind it is to go through rules step by step and check if we have correct number of wires to perform defusal. We gonna recursively check each branch and if at some point we&amp;rsquo;ll find out that current branch is wrong we go back, which is backtracking part. Lets brake it in parts.
First we check if its a last step (&lt;strong&gt;1&lt;/strong&gt;) and there are no wires left (&lt;strong&gt;2&lt;/strong&gt;) then this is correct path and bomb is defusable. If there are still some wires left in the end, then this path is wrong and if its not the end yet - check current step. Checking current step means go through all possible branches for it (&lt;strong&gt;3&lt;/strong&gt;) and check if we have enough wires to cut (&lt;strong&gt;4&lt;/strong&gt;) and path down this branch satisfies rules (&lt;strong&gt;5&lt;/strong&gt;). If both are true, then this path is correct, if not - check other ones.&lt;/p&gt;

&lt;p&gt;Idea is pretty straightforward, implementation as well and it works as good as it can get. But i have a feeling that it could be written in better way, more idiomatic. I don&amp;rsquo;t like so much nesting and it looks like that recursive &lt;code&gt;loop&lt;/code&gt; can be changed with something more appropriate, but I have no clue with what exactly. I even asked for code review in clojure slack channel, and if I&amp;rsquo;ll be lucky enough to get some clues where I&amp;rsquo;ll do update of this solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Daily programmer (easy Monday)</title>
      <link>https://a-urth.github.io/post/daily-programmer-easy-2/</link>
      <pubDate>Mon, 21 Nov 2016 23:35:07 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/daily-programmer-easy-2/</guid>
      <description>&lt;p&gt;Another easy Monday except this one is little bit more easy than last one. &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/5e4mde/20161121_challenge_293_easy_defusing_the_bomb/&#34;&gt;Here&lt;/a&gt; is the task.&lt;/p&gt;

&lt;p&gt;I finished rather fast with initial version, but doing little changes for of times I&amp;rsquo;ve ended up with this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns daily-programmer.20161121_easy.core
  (:use [clojure.string :only [split-lines]]))

(def wire-rules-m {&amp;quot;white&amp;quot; {:to-cut #{} :not-to-cut #{&amp;quot;white&amp;quot; &amp;quot;black&amp;quot;}}
                   &amp;quot;red&amp;quot; {:to-cut #{&amp;quot;green&amp;quot;} :not-to-cut #{}}
                   &amp;quot;black&amp;quot; {:to-cut #{} :not-to-cut #{&amp;quot;white&amp;quot; &amp;quot;green&amp;quot; &amp;quot;orange&amp;quot;}}
                   &amp;quot;orange&amp;quot; {:to-cut #{&amp;quot;red&amp;quot; &amp;quot;black&amp;quot;} :not-to-cut #{}}
                   &amp;quot;green&amp;quot; {:to-cut #{&amp;quot;orange&amp;quot; &amp;quot;white&amp;quot;} :not-to-cut #{}}
                   &amp;quot;purple&amp;quot; {:to-cut #{} :not-to-cut #{&amp;quot;purple&amp;quot; &amp;quot;green&amp;quot; &amp;quot;orange&amp;quot; &amp;quot;white&amp;quot;}}})

(defn can-cut? [wire &amp;amp; [{:keys [to-cut not-to-cut]} rules]]
  (and
   (or (empty? to-cut) (contains? to-cut wire))
   (or (empty? not-to-cut) (not (contains? not-to-cut wire)))))

(defn defuse
  ([wires]
   (defuse wires {:to-cut #{}, :not-to-cut #{}}))

  ([[wire &amp;amp; others] rules]
   (let [cut (can-cut? wire rules)]
     (if (nil? others)
       cut
       (and cut (recur others (get wire-rules-m wire)))))))

(println (if (defuse (split-lines (slurp *in*))) &amp;quot;Bomb defused&amp;quot; &amp;quot;Boom&amp;quot;))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And as You can guess I didn&amp;rsquo;t have a clue how to implement real state machines. If You want to see something cool and fast then You should definitely check couple of top comments on reddit thread, its insane!&lt;/p&gt;

&lt;p&gt;So, getting back to my solution - major things I changed comparing to initial version are:
* changed &lt;code&gt;loop&lt;/code&gt; and default arguments in it to function with two arities and doing recur directly to it;
* replaced &lt;code&gt;if&lt;/code&gt; form with &lt;code&gt;and&lt;/code&gt; so it looks shorter and cleaner e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(and cut (recur others (get wire-rules-m wire))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;previously rules map destructuring was done in &lt;code&gt;let&lt;/code&gt; just before recursion call, moved it to &lt;code&gt;can-cut?&lt;/code&gt; function arguments;&lt;/li&gt;
&lt;li&gt;changed names of rules map keys, now its much better then &amp;ldquo;allowed&amp;rdquo; and &amp;ldquo;disallowed&amp;rdquo; in my opinion.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Saturday morning - random coding problems solving</title>
      <link>https://a-urth.github.io/post/random-saturday-morning-coding-tasks/</link>
      <pubDate>Sat, 19 Nov 2016 11:31:39 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/random-saturday-morning-coding-tasks/</guid>
      <description>

&lt;p&gt;So I just randomly (from &lt;a href=&#34;http://reddit.com/r/coding&#34;&gt;/r/coding&lt;/a&gt; actually) came across this &lt;a href=&#34;http://www.gainlo.co/&#34;&gt;site&lt;/a&gt; which is built over idea of mocking interviews similar to big IT companies do. And it got my attention because it has some examples of programming tasks in its blog. Tasks, which I found seem to be not hard at all (authors mention this as well) and I think that such problems may be asked either for lower grade positions or during initial stages of interviewing process.&lt;/p&gt;

&lt;p&gt;But anyway, I found some of them really interesting and since I had some time this Saturday morning I thought - way not to sharpen my coding skills with beautiful clojure (because being python dev usually on interviews I&amp;rsquo;m doing them in python).&lt;/p&gt;

&lt;h5 id=&#34;move-zeroes-http-blog-gainlo-co-index-php-2016-11-18-uber-interview-question-move-zeroes&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/11/18/uber-interview-question-move-zeroes/&#34;&gt;Move Zeroes&lt;/a&gt;&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Modify the array by moving all the zeros to the end (right side). The order of other elements doesn’t matter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I came with this straightforward solution. I know that it can be done better and in fact, later I did it in python in similar way which described in blog post. But this one sees to be neat and tiny.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def problem [1 2 0 3 0 1 2])

(defn reducer [[acc i] e]
  (if (zero? e)
    [acc (inc i)]
    [(conj acc e) i]))

(let [[non-zeros zeros-num] (reduce reducer [[] 0] problem)]
  (into non-zeros (repeat zeros-num 0)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I&amp;rsquo;m just going through list of values counting how much zeroes there are and filtering result for them. After that I&amp;rsquo;m just adding required number of zeroes to filtered values.&lt;/p&gt;

&lt;p&gt;In the blog post You can find better solution which requires data mutation, I think it can be written in &lt;code&gt;clojure&lt;/code&gt; as well but I just wasn&amp;rsquo;t interested in that.&lt;/p&gt;

&lt;h5 id=&#34;delimiter-matching-http-blog-gainlo-co-index-php-2016-09-30-uber-interview-question-delimiter-matching&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/09/30/uber-interview-question-delimiter-matching/&#34;&gt;Delimiter Matching&lt;/a&gt;&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Write an algorithm to determine if all of the delimiters in an expression are matched and closed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is pretty popular coding task and I&amp;rsquo;m pretty sure that everyone faced it in one way or another if they ever done some programming stuff on data structures. Because this is the most popular showcase for &lt;code&gt;stack&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def problem &amp;quot;[dklf(df(kl))d]{&amp;quot;)

(def brackets-m {\] \[, \} \{, \) \(})

(def closings (set (keys brackets-m)))

(def openings (set (vals brackets-m)))

(def error-msg &amp;quot;Delimiters unmatched!&amp;quot;)

(defn match? [o c] (= (get brackets-m c) o))

(defn process-sym [res s]
  (cond
    (contains? openings s) (conj res s)
    (contains? closings s) (if (match? (last res) s)
                             (drop-last res)
                             (throw (Exception. error-msg)))
    :else res))

(let [s (reduce process-sym [] problem)]
  (when (not (empty? s))
    (throw (Exception. error-msg))))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are plenty of &lt;code&gt;def&lt;/code&gt;s and helper function&amp;rsquo;s declaration but main idea is in &lt;code&gt;process-sym&lt;/code&gt; function. What id does is checks if we have other than bracket symbol - just continue, if its an opening bracket - put it into stack, if closing one - take last from stack and compare them. If they do not match each other - raise exception which means that delimiters are not matched. Same check is required after processing whole sequence - if there is still something in the stack, then raise exception. &lt;code&gt;nil&lt;/code&gt; returned if delimiters are matched. I did it with exceptions just because its easier to propagate error in &lt;code&gt;process-sym&lt;/code&gt; but it can be approached in some other ways.&lt;/p&gt;

&lt;h5 id=&#34;longest-substring-without-repeating-characters-http-blog-gainlo-co-index-php-2016-10-07-facebook-interview-longest-substring-without-repeating-characters&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/10/07/facebook-interview-longest-substring-without-repeating-characters/&#34;&gt;Longest Substring Without Repeating Characters&lt;/a&gt;&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a string, find the longest substring without repeating characters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m sure that this one is also popular programming question but I actually never came across it. Right of the way I&amp;rsquo;ve noticed naive solution (check all substrings), but its obvious that this was not the most efficient one, so I&amp;rsquo;ve decided to think a little before writing even single character. Soon I found that we can store symbols in set to check for repeats and use two pointers for current substring and in case of repeat we should start next search from position of repeated symbol. But my mistake was that I wanted to use position of second repeated symbol instead of first one. In order to do that efficient I changed my set to map with symbols as keys and their indexes as values and it worked like a charm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def problem &amp;quot;abccdefdgh&amp;quot;)

(def problem-l (count problem))

(loop [start-i 0 end-i 0
       cur-syms-m {}]
  (if (= end-i problem-l)
    (subs problem start-i end-i)
    (let [cur-sym (get problem end-i)
          cur-i (get cur-syms-m cur-sym)
          next-end-i (inc end-i)]
      (if (nil? cur-i)
        (recur start-i next-end-i (conj cur-syms-m {cur-sym end-i}))
        (recur (inc cur-i) next-end-i {cur-sym cur-i})))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In blogpost You can find solution in python which uses similar but slightly different approach.&lt;/p&gt;

&lt;h5 id=&#34;design-hit-counter-http-blog-gainlo-co-index-php-2016-09-12-dropbox-interview-design-hit-counter&#34;&gt;&lt;a href=&#34;http://blog.gainlo.co/index.php/2016/09/12/dropbox-interview-design-hit-counter/&#34;&gt;Design Hit Counter&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Interesting question on systems design, again, pretty common one. Only thing that I would like to add is if You need to count only unique visitors and we are talking about really big amount of data then speed and memory efficiency are much more important then exact answer, so approximation approaches such as &lt;a href=&#34;https://en.wikipedia.org/wiki/HyperLogLog&#34;&gt;HyperLoglog&lt;/a&gt; should be mentioned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Daily programmer (easy Monday)</title>
      <link>https://a-urth.github.io/post/daily-programmer-easy/</link>
      <pubDate>Thu, 17 Nov 2016 18:05:25 +0200</pubDate>
      
      <guid>https://a-urth.github.io/post/daily-programmer-easy/</guid>
      <description>

&lt;p&gt;Since this is first post on daily-programmer topic I need some introduction.
So there is this awesome sub reddit called &lt;a href=&#34;http://reddit.com/r/dailyprogrammer/&#34;&gt;DailyProgrammer&lt;/a&gt; where programming tasks on algorithms are posted 3 times a week. Easy ones on Mondays, intermedium ones on Tuesdays and hard ones on Friday. You can post Your solutions in favorite language and compile and test them directly in the comment section with &lt;code&gt;/u/CompileBot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been aware about this thing for already quite some time but never was able to stick with it for too long. Actually my last try lasted only for one easy task, which is hilarious, I know.&lt;/p&gt;

&lt;p&gt;And as You&amp;rsquo;ve already may guessed, since I&amp;rsquo;m some what trying to get closer to &lt;a href=&#34;http://clojure.org&#34;&gt;Clojure&lt;/a&gt;, recently I decided to do one more try with daily-programmer. Here is my solution to latest task at this moment (its description can be found &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/5d1l7v/20161115_challenge_292_easy_increasing_range/&#34;&gt;here&lt;/a&gt;), I&amp;rsquo;ll go through main points and my design decisions, mainly to do small repeat to myself and maybe improve something.&lt;/p&gt;

&lt;p&gt;Here is my solution and lets break it down into blocks&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Clojure&#34;&gt;(use &#39;[clojure.string :only [split split-lines join]])

(defn pow10 [i] (reduce * (repeat i 10)))

(defn unshorten [x y]  ; (4)
  (if (&amp;gt; y x)
    y
    (let [l-y (count (str y))
          pred-x (quot x (pow10 l-y))  ; (4.1)
          last-x (mod x (pow10 l-y))  ; (4.2)
          pred (if (&amp;lt; last-x y) pred-x (inc pred-x))]  ; (4.3)
      (Integer. (str pred y)))))  ; (4.4)

(defn range-part [acc s]  ; (3)
  (let [[t-start t-end t-step] (map #(Integer. %) (split s #&amp;quot;-|:|\.{2}&amp;quot;))
        n (last acc)
        start (if (nil? n) t-start (unshorten n t-start))  ; (3.1)
        end (inc (if (nil? t-end) start (unshorten start t-end)))
        step (if (nil? t-step) 1 t-step)]
    (into acc (range start end step))))  ; (3.2)

(defn parse-range [s]
  (println (join &amp;quot; &amp;quot; (reduce range-part [] (split s #&amp;quot;,&amp;quot;)))))  ; (2)

(seq (map parse-range (split-lines (slurp *in*))))  ; (1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1&#34;&gt;(1)&lt;/h5&gt;

&lt;p&gt;First we read input from stdin - its just the most convenient way to test/run and test after posting. Split input in lines and map our parse function over them. &lt;code&gt;seq&lt;/code&gt; function is called because &lt;code&gt;map&lt;/code&gt; is lazy and without creating sequence it well return nothing since parse won&amp;rsquo;t be called even once.&lt;/p&gt;

&lt;h5 id=&#34;2&#34;&gt;(2)&lt;/h5&gt;

&lt;p&gt;Then we split each line in smaller parts separated by comma, which will represent each individual range. And reduce these parts with function responsible for creating sequences. Then join results into one string separated with spaces and print it to stdout.&lt;/p&gt;

&lt;h5 id=&#34;3&#34;&gt;(3)&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;range-part&lt;/code&gt; function which generates sequences and adds to result accumulator only does performs preparation and utilizes built-in &lt;code&gt;range&lt;/code&gt; function. Data preparation consists of splitting each part into &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt; components and taking last value from result so we can know if current ones are in short form or not. Since some of components may be missing (except start of course) we check if they present and &lt;code&gt;unshorten&lt;/code&gt; them (3.1). After having all these parts we just create sequence and adding it to result vector (3.2).&lt;/p&gt;

&lt;h5 id=&#34;4&#34;&gt;(4)&lt;/h5&gt;

&lt;p&gt;Everything before that was pretty easy and straightforward for me right of the way. But that &lt;code&gt;unshorten&lt;/code&gt; thing really got me scratching my head, because right from the start I could tell that there is way to do that in constant time, but couldn&amp;rsquo;t actually get it. And on reddit is posted older solution with this operation hella not optimized. This is actually the reason for me to write it down - analyze everything and find better solution. So here it is in some details.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn unshorten [x y]  ; (4)
  (if (&amp;gt; y x)
    y
    (let [l-y (count (str y))
          pred-x (quot x (pow10 l-y))  ; (4.1)
          last-x (mod x (pow10 l-y))  ; (4.2)
          pred (if (&amp;lt; last-x y) pred-x (inc pred-x))]  ; (4.3)
      (Integer. (str pred y)))))  ; (4.4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all after converting numbers to integers I check if current number actually smaller than previous, because if not I just return it. Then I split previous number (&lt;code&gt;x&lt;/code&gt;) in two parts: one is right part with same length as current number (4.2) and second one is basically everything that comes to the left (4.1). After that split I need to decide what to add to the current number on the left side (since we now that right side will be our current number) and it either will be left part of previous number (if right side is smaller than current) as it is or it will be increased by one (4.3). And having those two parts of result I just concat them and convert back to integer (4.4).&lt;/p&gt;

&lt;p&gt;So this was a little break down of solution which I came up with, and since this Wednesday there was no intermedium task I had time to do it and analyze better.&lt;/p&gt;

&lt;p&gt;All sources for daily-programmer solutions I did can be found on &lt;a href=&#34;https://github.com/a-urth/daily-programmer&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>